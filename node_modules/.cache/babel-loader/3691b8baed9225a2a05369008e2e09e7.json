{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Documents/ek-lc-dev/src/screen/test.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Sound from 'react-sound';\nimport test_sound from './../common/Sound_11084.wav'; //import voxImplant from 'voximplant-websdk'\n// import SpeechRecognition from \"react-speech-recognition\";\n// const recognition = new SpeechRecognition()\n// recognition.continous = true\n// recognition.interimResults = true\n// recognition.lang = 'en-US'\n// recognition.onresult = event => {\n//     console.log(event)\n//   }\n\nclass Screen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sound_test = () => {\n      this.props.set_test_sound(Sound.status.PLAYING);\n    };\n\n    this.add_item = () => {\n      this.props.test_list_add_item(this.props.store.test.barcode);\n      this.props.set_test_barcode('');\n    };\n\n    this.voximplant = async () => {\n      const fetchJsFromCDN = (src, externals = []) => {\n        new Promise((resolve, reject) => {\n          const script = document.createElement('script');\n          script.setAttribute('src', src);\n          script.addEventListener('load', () => {\n            resolve(externals.map(key => {\n              const ext = window[key];\n              typeof ext === 'undefined' && console.warn(`No external named '${key}' in window`);\n              return ext;\n            }));\n          });\n          script.addEventListener('error', reject);\n          document.body.appendChild(script);\n        });\n      };\n\n      fetchJsFromCDN('//cdn.voximplant.com/edge/voximplant.min.js', ['voximplant']).then(([voximplant]) => voximplant.init()); //console.log(VoxImplant)\n      //voxImplant.getInstance();\n      // try {\n      //   await voximplant.init();\n      //   console.log('SDK initialized')\n      //   voximplant.addEventListener(VoxImplant.Events.ConnectionClosed, () => {\n      //     console.log('Connection was closed')\n      //   });\n      //   try {\n      //     await voximplant.connect();\n      //     console.log('Connection was established successfully')\n      //   } catch (e) {\n      //     console.log('Connection failed')\n      //   }\n      //  } catch (e) {\n      //   console.log('SDK init failure')\n      //  }\n      //  try {\n      //   // Change \"appname\" and \"accname\" to names of your application and account,\n      //   // \"username\" and \"password\" to name and password of user created via\n      //   // the control panel.\n      //   await voximplant.login(\"101@express-kinetika.timelias.voximplant.com\",\n      //     \"Explorer48\");\n      //     console.log('Authorization success')\n      //   // Authorization success\n      //  } catch (e) {\n      //   // Authorization failure\n      //  }\n    };\n  }\n\n  render() {\n    const add_item = this.add_item;\n\n    document.onkeydown = function (event) {\n      //console.log(event.keyCode)\n      try {\n        if (event.keyCode === 13) {\n          console.log();\n          add_item();\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.voximplant.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Voximplant\"), React.createElement(\"input\", {\n      value: this.props.store.test.barcode,\n      onChange: e => {\n        this.props.set_test_barcode(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), this.props.store.test.list.map((el, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, el);\n    }), this.props.store.general.test_sound !== undefined ? React.createElement(Sound, {\n      url: test_sound,\n      playStatus: this.props.store.general.test_sound,\n      onLoading: console.log('1'),\n      onPlaying: console.log('2'),\n      onFinishedPlaying: console.log('3'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default connect(state => ({\n  store: state\n}), dispatch => ({\n  set_test_sound: param => {\n    dispatch({\n      type: 'set_test_sound',\n      payload: param\n    });\n  },\n  test_list_add_item: param => {\n    dispatch({\n      type: 'test_list_add_item',\n      payload: param\n    });\n  },\n  set_test_barcode: param => {\n    dispatch({\n      type: 'set_test_barcode',\n      payload: param\n    });\n  }\n}))(Screen);","map":{"version":3,"sources":["/Users/elias/Documents/ek-lc-dev/src/screen/test.js"],"names":["React","connect","Sound","test_sound","Screen","Component","sound_test","props","set_test_sound","status","PLAYING","add_item","test_list_add_item","store","test","barcode","set_test_barcode","voximplant","fetchJsFromCDN","src","externals","Promise","resolve","reject","script","document","createElement","setAttribute","addEventListener","map","key","ext","window","console","warn","body","appendChild","then","init","render","onkeydown","event","keyCode","log","e","bind","target","value","list","el","index","general","undefined","state","dispatch","param","type","payload"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { connect } from 'react-redux';\n\nimport Sound from 'react-sound';\nimport test_sound from './../common/Sound_11084.wav'\n\n//import voxImplant from 'voximplant-websdk'\n\n// import SpeechRecognition from \"react-speech-recognition\";\n\n// const recognition = new SpeechRecognition()\n\n// recognition.continous = true\n// recognition.interimResults = true\n// recognition.lang = 'en-US'\n// recognition.onresult = event => {\n//     console.log(event)\n//   }\n\n\n\nclass Screen extends React.Component {\n\n  \n    sound_test = () =>{\n        this.props.set_test_sound(Sound.status.PLAYING) \n    }\n\n    add_item = () => {\n        this.props.test_list_add_item(this.props.store.test.barcode)\n        this.props.set_test_barcode('')\n    }\n\n   \n    // start = () =>{\n    //     recognition.start()\n    // }\n\n    // end = () => {\n    //     recognition.end()\n\n    // }\n     voximplant = async ()  => {\n\n\n      const fetchJsFromCDN = (src, externals = []) => {\n        new Promise((resolve, reject) => {\n          const script = document.createElement('script')\n          script.setAttribute('src', src)\n          script.addEventListener('load', () => {\n            resolve(externals.map(key => {\n              const ext = window[key]\n              typeof ext === 'undefined' && console.warn(`No external named '${key}' in window`)\n              return ext\n            }))\n          })\n          script.addEventListener('error', reject)\n          document.body.appendChild(script)\n        })\n      }\n      \n      fetchJsFromCDN('//cdn.voximplant.com/edge/voximplant.min.js', ['voximplant']).then(([voximplant]) => voximplant.init())\n\n      //console.log(VoxImplant)\n      //voxImplant.getInstance();\n      // try {\n      //   await voximplant.init();\n      //   console.log('SDK initialized')\n      //   voximplant.addEventListener(VoxImplant.Events.ConnectionClosed, () => {\n      //     console.log('Connection was closed')\n      //   });\n      //   try {\n      //     await voximplant.connect();\n      //     console.log('Connection was established successfully')\n      //   } catch (e) {\n      //     console.log('Connection failed')\n      //   }\n      //  } catch (e) {\n      //   console.log('SDK init failure')\n      //  }\n\n      //  try {\n      //   // Change \"appname\" and \"accname\" to names of your application and account,\n      //   // \"username\" and \"password\" to name and password of user created via\n      //   // the control panel.\n      //   await voximplant.login(\"101@express-kinetika.timelias.voximplant.com\",\n      //     \"Explorer48\");\n      //     console.log('Authorization success')\n      //   // Authorization success\n      //  } catch (e) {\n      //   // Authorization failure\n      //  }\n    }\n    \n\n        \n    \n    \n      render() {\n\n        \n\n        const add_item = this.add_item\n        document.onkeydown = function (event) {\n            //console.log(event.keyCode)\n            \n            try {\n              if (event.keyCode === 13) {\n                  console.log()\n                  add_item()\n                \n                \n              }\n            } catch (e) { \n                console.log(e)\n            }\n          };\n\n        return (\n          <div>\n            <button onClick={this.voximplant.bind(this)}>Voximplant</button>\n           {/*  <button onClick={this.end.bind(this)}>end</button> */}\n            <input  value={this.props.store.test.barcode} onChange={(e)=>{this.props.set_test_barcode(e.target.value)}} />\n            {this.props.store.test.list.map((el,index)=>{\n                return(\n                    <div key={index}>{el}</div>\n                )\n            })}\n            {/* <button className=\"search_box\" onClick={this.sound_test.bind(this)}>Тест звука</button> */}\n           {this.props.store.general.test_sound !== undefined ? (\n                <Sound\n                url={test_sound}\n                playStatus={this.props.store.general.test_sound}\n                \n                onLoading={console.log('1')}\n                onPlaying={console.log('2')}\n                onFinishedPlaying={console.log('3')}\n              />\n           ):(null)}\n           \n          </div>\n        )\n      }\n}\n\nexport default connect(\n    state => ({\n        store: state\n    }),\n    dispatch => ({\n        set_test_sound: (param) => { dispatch({ type: 'set_test_sound', payload: param }) },\n        test_list_add_item: (param) => { dispatch({ type: 'test_list_add_item', payload: param }) },\n        set_test_barcode: (param) => { dispatch({ type: 'set_test_barcode', payload: param }) },\n    })\n)(Screen)\n\n"]},"metadata":{},"sourceType":"module"}