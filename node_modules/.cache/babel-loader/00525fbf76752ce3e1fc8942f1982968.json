{"ast":null,"code":"const today = new Date();\nlet mm = today.getMonth() + 1; // getMonth() is zero-based\n\nlet dd = today.getDate();\nconst y = today.getFullYear();\n\nif (mm < 10) {\n  mm = '0' + mm;\n}\n\nif (dd < 10) {\n  dd = '0' + dd;\n}\n\nconst date = y + '-' + mm + '-' + dd;\nconst initialState = {\n  disp_for_del: [],\n  date: date,\n  terminal_list: [],\n  selected_terminal: {},\n  courier_list: [],\n  selected_courier: null,\n  assignment_mode: false,\n  polygon: [],\n  input_courier: \"\",\n  focus_input_courier: false,\n  input_courier_color: \"#000\",\n  courier_filter: '',\n  customer_filter: '',\n  focus_input_customer: false,\n  input_customer: \"\",\n  num_filter: \"\"\n};\nexport default function dispatch(state = initialState, action) {\n  switch (action.type) {\n    case 'set_disp_map_date':\n      return { ...state,\n        date: action.payload\n      };\n\n    case 'set_input_courier':\n      if (action.payload.courier === undefined) {\n        return { ...state,\n          input_courier: action.payload\n        };\n      } else {\n        return { ...state,\n          input_courier: action.payload.courier,\n          input_courier_color: action.payload.color\n        };\n      }\n\n    case 'set_input_customer':\n      return { ...state,\n        input_customer: action.payload\n      };\n\n    case 'set_focus_input_customer':\n      return { ...state,\n        focus_input_customer: action.payload\n      };\n\n    case 'set_customer_filter':\n      return { ...state,\n        customer_filter: action.payload\n      };\n\n    case 'set_num_filter':\n      return { ...state,\n        num_filter: action.payload\n      };\n\n    case 'set_focus_input_courier':\n      return { ...state,\n        focus_input_courier: action.payload\n      };\n\n    case 'set_courier_filter':\n      return { ...state,\n        courier_filter: action.payload\n      };\n\n    case 'set_disp_map_disp_for_del':\n      return { ...state,\n        disp_for_del: action.payload\n      };\n\n    case 'select_disp_map_disp_for_del':\n      if (action.payload.shift) {\n        return { ...state,\n          disp_for_del: [...state.disp_for_del.map(el => {\n            if (el.Num === action.payload.num) {\n              return { ...el,\n                selected: !el.selected,\n                modify: true\n              };\n            } else {\n              return el;\n            }\n          })]\n        };\n      } else {\n        return { ...state,\n          disp_for_del: [...state.disp_for_del.map(el => {\n            if (el.Num === action.payload.num) {\n              return { ...el,\n                selected: true,\n                modify: true\n              };\n            } else {\n              if (el.selected) {\n                return { ...el,\n                  selected: false,\n                  modify: true\n                };\n              } else return el;\n            }\n          })]\n        };\n      }\n\n    case 'set_disp_map_assignment_mode':\n      return { ...state,\n        assignment_mode: action.payload,\n        disp_for_del: [...state.disp_for_del.map(el => {\n          if (el.selected) {\n            return { ...el,\n              selected: false,\n              modify: true\n            };\n          } else return el;\n        })]\n      };\n\n    case 'select_disp_map_courier':\n      return { ...state,\n        selected_courier: action.payload\n      };\n\n    case 'set_courier_list':\n      return { ...state,\n        courier_list: action.payload\n      };\n\n    case 'disp_map_reset_select':\n      return { ...state,\n        disp_for_del: [...state.disp_for_del.map(el => {\n          if (el.selected) {\n            return { ...el,\n              selected: false,\n              modify: true\n            };\n          } else return el;\n        })],\n        polygon: []\n      };\n\n    case 'disp_map_add_polygon_point':\n      return { ...state,\n        polygon: [...state.polygon, action.payload]\n      };\n\n    case 'modify_disp_map':\n      return { ...state,\n        disp_for_del: [...state.disp_for_del.map(el => {\n          if (el.Num === action.payload.num) {\n            return { ...el,\n              modify: action.payload.modify\n            };\n          } else {\n            return el;\n          }\n        })]\n      };\n\n    case 'check_courier_disp_map':\n      return { ...state,\n        courier_list: [...state.courier_list.map(el => {\n          if (el.key === action.payload) {\n            return { ...el,\n              checked: !el.checked\n            };\n          } else {\n            return el;\n          }\n        })]\n      };\n\n    case 'select_arr_disp_for_del':\n      return { ...state,\n        disp_for_del: [...state.disp_for_del.map(el => {\n          //console.log(action.payload)\n          //console.log(el.Num)\n          const Num = String(el.Num); //console.log(Num)\n\n          const find = action.payload.findIndex(element => {\n            if (element === Num) {\n              return true;\n            }\n          }); //console.log(find)\n\n          if (find !== -1) {\n            if (!el.selected) {\n              return { ...el,\n                selected: true,\n                modify: true\n              };\n            } else return el;\n          } else {\n            if (el.selected) {\n              return { ...el,\n                selected: false,\n                modify: true\n              };\n            } else return el;\n          }\n        })]\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/saint/123/ek-lc-dev/src/reducers/disp_map.js"],"names":["today","Date","mm","getMonth","dd","getDate","y","getFullYear","date","initialState","disp_for_del","terminal_list","selected_terminal","courier_list","selected_courier","assignment_mode","polygon","input_courier","focus_input_courier","input_courier_color","courier_filter","customer_filter","focus_input_customer","input_customer","num_filter","dispatch","state","action","type","payload","courier","undefined","color","shift","map","el","Num","num","selected","modify","key","checked","String","find","findIndex","element"],"mappings":"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","sourcesContent":["const today = new Date()\nlet mm = today.getMonth() + 1; // getMonth() is zero-based\nlet dd = today.getDate();\n\nconst y = today.getFullYear()\nif (mm<10) { mm = '0' + mm }\nif (dd<10) {dd = '0' + dd}\n        \nconst date = y+'-'+mm+'-'+dd\n\nconst initialState = {\n\n    disp_for_del: [],\n    date: date,\n    terminal_list: [],\n    selected_terminal: {},\n    courier_list: [],\n    selected_courier: null,\n    assignment_mode: false,\n    polygon: [],\n    input_courier:\"\",\n    focus_input_courier: false,\n    input_courier_color: \"#000\",\n    courier_filter: '',\n\n    customer_filter: '',\n    focus_input_customer: false,\n    input_customer:\"\",\n\n    num_filter: \"\",\n\n\n\n}\n\nexport default function dispatch(state = initialState, action) {\n    switch (action.type) {\n        case 'set_disp_map_date': return { ...state, date: action.payload }\n        case 'set_input_courier': \n        if (action.payload.courier === undefined) {\n            return { ...state, input_courier: action.payload }\n        } else {\n        return { ...state, input_courier: action.payload.courier, input_courier_color: action.payload.color }\n        }\n        case 'set_input_customer': return { ...state, input_customer: action.payload}\n        case 'set_focus_input_customer': return { ...state, focus_input_customer: action.payload }\n        case 'set_customer_filter': return { ...state, customer_filter: action.payload }\n\n        case 'set_num_filter': return { ...state, num_filter: action.payload }\n\n        case 'set_focus_input_courier': return { ...state, focus_input_courier: action.payload }\n        case 'set_courier_filter': return { ...state, courier_filter: action.payload }\n        case 'set_disp_map_disp_for_del': return { ...state, disp_for_del: action.payload }\n        \n        case 'select_disp_map_disp_for_del': \n        if(action.payload.shift){\n            return { ...state, disp_for_del: [...state.disp_for_del.map((el) => { if (el.Num === action.payload.num) { return { ...el, selected: !el.selected, modify: true } } else { return el} })] }\n        } else {\n            return { ...state, disp_for_del: [...state.disp_for_del.map((el) => { if (el.Num === action.payload.num) { return { ...el, selected: true, modify: true } } else { \n                if (el.selected) {\n                return {...el, selected: false, modify: true}\n            } else return el \n            } })] }\n        }\n        case 'set_disp_map_assignment_mode': return { ...state, assignment_mode: action.payload, disp_for_del: [...state.disp_for_del.map((el) => { \n            \n            if (el.selected) {\n                return {...el, selected: false, modify: true}\n            } else return el \n        })] }\n        case 'select_disp_map_courier': return { ...state, selected_courier: action.payload }\n        case 'set_courier_list': return { ...state, courier_list: action.payload }\n        case 'disp_map_reset_select': return { ...state, disp_for_del: [...state.disp_for_del.map((el) => { \n            if (el.selected) {\n                return {...el, selected: false, modify: true}\n            } else return el  \n        })],polygon: [] }\n        case 'disp_map_add_polygon_point': return { ...state, polygon: [...state.polygon, action.payload ]}\n\n        case 'modify_disp_map': return { ...state, disp_for_del: [...state.disp_for_del.map((el) => { if (el.Num === action.payload.num) { return { ...el, modify: action.payload.modify } } else { return el} })] }\n\n        case 'check_courier_disp_map': return { ...state, courier_list: [...state.courier_list.map((el) => { if (el.key === action.payload) { return { ...el, checked: ! el.checked} } else { return el} })] }\n        case 'select_arr_disp_for_del': return { ...state, disp_for_del: [...state.disp_for_del.map((el) => { \n            //console.log(action.payload)\n            //console.log(el.Num)\n            const Num = String(el.Num)\n            //console.log(Num)\n            const find = action.payload.findIndex(element=>{ if (element === Num) {return true}})\n            //console.log(find)\n            if (\n                find !== -1\n                ) { if (!el.selected){\n                    return { ...el, selected: true, modify: true}\n                } else return el \n                } else { if (el.selected){\n                    return {...el, selected: false, modify: true}\n                } else return el \n                } })] \n        }\n        \n        default: return state\n    }\n}"]},"metadata":{},"sourceType":"module"}