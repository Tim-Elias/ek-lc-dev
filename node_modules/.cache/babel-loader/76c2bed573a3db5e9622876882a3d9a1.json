{"ast":null,"code":"var _jsxFileName = \"/home/saint/123/ek-lc-dev/src/screen/disp_map.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport GoogleMapReact from 'google-map-react';\nimport Select from 'react-select';\nimport { customStyles } from \"./../common/common_style\";\nimport { Card, Input, Button, Popup, Dropdown, List, Icon } from 'semantic-ui-react';\nimport logo from './../common/1024.png';\nimport './disp_map.css';\nimport { get_data } from './../common/common_modules';\nlet bermudaTriangle;\nlet g_map;\nlet g_maps;\nlet markers = [];\nlet shift = false;\n\nclass Screen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.set_input_customer = async value => {\n      if (value !== this.props.store.disp_map.input_customer) {\n        await this.props.set_input_customer(value);\n        await markers.forEach(el_1 => {\n          el_1.setMap(null);\n        });\n\n        if (value === \"\") {\n          this.render_markers(this.props.store.disp_map.disp_for_del, true);\n        } else {\n          this.render_markers(this.props.store.disp_map.disp_for_del.filter(el => {\n            return el.Customer === value;\n          }), true);\n        }\n      }\n    };\n\n    this.set_courier_filter = async value => {\n      await this.props.set_courier_filter(value);\n      this.render_markers(this.props.store.disp_map.disp_for_del, true);\n    };\n\n    this.render_markers = (arr, hard) => {\n      console.log(arr);\n      console.log(hard);\n      arr.filter(disp_el => {\n        return disp_el.modify || hard;\n      }).map(el => {\n        markers.filter(marker_el => {\n          return marker_el.title === el.Num;\n        }).forEach(el_1 => {\n          el_1.setMap(null);\n        });\n\n        if (this.props.store.disp_map.courier_filter === '' || this.props.store.disp_map.courier_filter === el.TaskValue) {\n          const lat = parseFloat(el.RecLat.replace(/,/, '.'));\n          const lng = parseFloat(el.RecLng.replace(/,/, '.'));\n          const Num = el.Num;\n          const marker_onClick = this.marker_onClick;\n          let path;\n          let scale;\n\n          if (el.Weight > 5 || el.Volume > 5) {\n            path = 'M -3,2 -2,3 2,3 3,2 3,-2 2,-3 -2,-3 -3,-2 z';\n            scale = 3;\n          } else {\n            path = g_maps.SymbolPath.CIRCLE;\n            scale = 10;\n          }\n\n          if (lat > 0 && lng > 0) {\n            var marker = new g_maps.Marker({\n              position: {\n                lat: lat,\n                lng: lng\n              },\n              map: g_map,\n              title: Num,\n              selected: el.selected,\n              icon: {\n                path: path,\n                fillColor: el.Color,\n                fillOpacity: 1,\n                strokeColor: 'black',\n                strokeWeight: .5,\n                scale: scale\n              }\n            });\n            var infowindow = new g_maps.InfoWindow({\n              content: `<div><div>${el.Num} </div><div>Заказчик: ${el.Customer}</div></div><div>Город: ${el.RecCity}</div><div>Адрес: <b>${el.RecAddress}</b></div><div>Получатель: ${el.RecPerson}</div><div>Телефон: ${el.RecPhone}</div><div>Время доставки: ${el.RecTime}</div><div>Вес: ${el.Weight} (${Math.round(el.Volume * 5) / 1000})</div><div>Статус: ${el.StatusType}: ${el.StatusValue} ${el.StoreZone === \"\" ? \"\" : \"</div><div>Зона хранения:\" + el.StoreZone}</div></div>`\n            });\n\n            if (el.selected) {\n              if (!this.props.store.disp_map.assignment_mode && !shift) {\n                infowindow.open(g_map, marker);\n              }\n\n              setInterval(function () {\n                toggleMarker();\n              }, 300);\n\n              function toggleMarker() {\n                if (marker.getVisible()) {\n                  marker.setVisible(false);\n                } else {\n                  marker.setVisible(true);\n                }\n              }\n            }\n\n            markers.push(marker); //console.log('push '+ Num)\n\n            marker.addListener('click', function () {\n              marker_onClick(el.Num);\n            });\n          }\n\n          this.props.modify_disp_map({\n            num: Num,\n            modify: false\n          });\n        }\n      });\n    };\n\n    this.reset = async () => {\n      await this.props.disp_map_reset_select();\n\n      try {\n        await bermudaTriangle.setPaths(this.props.store.disp_map.polygon);\n        await bermudaTriangle.setMap(null);\n      } catch {}\n\n      await this.render_markers(this.props.store.disp_map.disp_for_del);\n    };\n\n    this.marker_onClick = async key => {\n      await this.props.select_disp_map_disp_for_del({\n        num: key,\n        shift: shift\n      });\n      this.render_markers(this.props.store.disp_map.disp_for_del);\n    };\n\n    this.set_courier = () => {\n      const set_courier_data = {\n        userkey: this.props.store.login.userkey,\n        courier: this.props.store.disp_map.input_courier,\n        dispatch: this.props.store.disp_map.disp_for_del.filter(el => el.selected).map(el => {\n          return el.Num;\n        })\n      }; //console.log(set_courier_data)\n\n      get_data('setcourier', set_courier_data).then(result => {\n        //console.log(result);\n        this.get_map_data(this.props.store.disp_map.disp_for_del.filter(el => !el.selected).map(el => {\n          return el.Num;\n        }));\n        this.reset();\n      }, err => {\n        console.log(err);\n      });\n    };\n\n    this.get_map_data = not_modify => {\n      console.log(not_modify);\n      markers.forEach(el_1 => {\n        const search = not_modify.indexOf(el_1.title);\n\n        if (search === -1) {\n          el_1.setMap(null);\n        }\n      });\n      const data = {\n        userkey: this.props.store.login.userkey,\n        terminal: \"000000001\",\n        date: this.props.store.disp_map.date,\n        not_modify: not_modify\n      };\n      console.log(data);\n      get_data('dispfordel', data).then(result => {\n        console.log(result);\n        this.props.set_disp_map_disp_for_del(result);\n        this.render_markers(result);\n      }, err => {\n        this.props.set_disp_map_disp_for_del([]);\n        console.log(err);\n      });\n    };\n\n    this.set_disp_map_assignment_mode = checked => {\n      this.props.set_disp_map_assignment_mode(checked);\n      this.reset();\n    };\n\n    this.geocode = (Num, Address) => {\n      console.log(Address);\n      let geocoder = new g_maps.Geocoder();\n      let position;\n      const userkey = this.props.store.login.userkey;\n      const get_map_data = this.get_map_data;\n      const reset = this.reset;\n      const not_modify = this.props.store.disp_map.disp_for_del.filter(el => el.Num !== Num).map(el => {\n        return el.Num;\n      });\n      geocoder.geocode({\n        'address': Address\n      }, function (results, status) {\n        console.log(results);\n        console.log(status);\n\n        if (status == 'OK') {\n          position = results[0].geometry.location;\n          const lat_lng_data = {\n            userkey: userkey,\n            dispatch: Num,\n            lat: position.lat(),\n            lng: position.lng()\n          };\n          get_data('setreclatlng', lat_lng_data).then(result => {\n            console.log(result);\n            get_map_data(not_modify);\n            reset();\n          }, err => {\n            console.log(err);\n          });\n        }\n      });\n    };\n\n    this.geocode_all = async () => {\n      let geocoder = new g_maps.Geocoder();\n      const userkey = this.props.store.login.userkey;\n      const array = this.props.store.disp_map.disp_for_del.filter(el => el.RecLat === \"\" || el.RecLng === \"\");\n      const not_modify = this.props.store.disp_map.disp_for_del.filter(el => el.RecLat !== \"\" && el.RecLng !== \"\").map(el => {\n        return el.Num;\n      });\n\n      for (const el of array) {\n        if (el.RecAddress !== \"\") {\n          await geocoder.geocode({\n            'address': el.RecCity + el.RecAddress\n          }, function (results, status) {\n            if (status == 'OK') {\n              const position = results[0].geometry.location;\n              const lat_lng_data = {\n                userkey: userkey,\n                dispatch: el.Num,\n                lat: position.lat(),\n                lng: position.lng()\n              };\n              get_data('setreclatlng', lat_lng_data).then(result => {\n                console.log(result);\n              }, err => {\n                console.log(err);\n              });\n            }\n          });\n        }\n      }\n\n      this.get_map_data(not_modify);\n      this.reset();\n    };\n\n    this.open_disp = async Num => {\n      this.props.set_active_window(\"wait\");\n      const data = {\n        userkey: this.props.store.login.userkey,\n        status: \"Накладная\",\n        num: Num\n      };\n      get_data('dispatch', data).then(result => {\n        this.props.set_data_disp(result);\n        this.props.set_active_window(\"disp\");\n        this.props.set_last_window(\"disp_map\");\n      }, err => {\n        console.log(err);\n      });\n    };\n  }\n\n  render() {\n    //var polygon_point = this.props.store.disp_map.polygon\n    const map_clck = target => {\n      if (this.props.store.disp_map.assignment_mode) {\n        this.props.disp_map_add_polygon_point(target);\n        bermudaTriangle.setPaths(this.props.store.disp_map.polygon);\n        bermudaTriangle.setMap(g_map);\n        let arr = [];\n        this.props.store.disp_map.disp_for_del.forEach(el => {\n          const lat = parseFloat(el.RecLat.replace(/,/, '.'));\n          const lng = parseFloat(el.RecLng.replace(/,/, '.'));\n\n          if (lat > 0 && lng > 0) {\n            var latLng = new g_maps.LatLng({\n              lat: lat,\n              lng: lng\n            });\n            var inside = g_maps.geometry.poly.containsLocation(latLng, bermudaTriangle); //console.log(latLng.lat() + \" \" + latLng.lng())\n            //console.log(el.Num + inside)\n\n            if (inside) {\n              arr.push(el.Num);\n            }\n          }\n        });\n        this.props.select_arr_disp_for_del(arr);\n        this.render_markers(this.props.store.disp_map.disp_for_del);\n      } else {\n        bermudaTriangle.setMap(null);\n      }\n    };\n\n    const render_markers = this.render_markers;\n    const arr = this.props.store.disp_map.disp_for_del;\n\n    const onGoogleApiLoaded = (map, maps) => {\n      g_map = map;\n      g_maps = maps;\n      bermudaTriangle = new g_maps.Polygon({\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      g_maps.event.addListenerOnce(g_map, 'tilesloaded', () => {\n        render_markers(arr, true);\n      });\n      g_maps.event.addListener(g_map, 'click', function (e) {\n        map_clck(e.latLng);\n      });\n    };\n\n    document.onkeydown = function (event) {\n      //console.log(event.keyCode)\n      try {\n        if (event.keyCode === 16) {\n          //set_hold_shift_true()\n          //console.log(\"Нажал\")\n          shift = true;\n        }\n      } catch (e) {}\n    };\n\n    document.onkeyup = function (event) {\n      try {\n        if (event.keyCode === 16) {\n          //set_hold_shift_false()\n          //console.log(\"Отпустил\")\n          shift = false;\n        }\n      } catch (e) {}\n    };\n\n    let calc_height = \"155px\";\n\n    if (this.props.store.general.full_screen) {\n      calc_height = \"15px\";\n    }\n\n    let Customers = this.props.store.disp_map.disp_for_del.map(el => {\n      return el.Customer;\n    }).filter((item, index, array) => {\n      return array.indexOf(item) === index;\n    });\n    return React.createElement(\"div\", {\n      className: \"disp_map_window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"disp_map_left_menu overflow_y\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"disp_map_button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button mini\",\n      onClick: () => {\n        this.props.set_full_screen();\n        this.render_markers.bind(this, this.props.store.disp_map.disp_for_del, true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u043B\\u043D\\u043E\\u044D\\u043A\\u0440\\u0430\\u043D\\u043D\\u044B\\u0439 \\u0440\\u0435\\u0436\\u0438\\u043C\")), React.createElement(\"div\", {\n      className: \"disp_map_button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button mini\",\n      onClick: this.geocode_all.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0432\\u0441\\u0435 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B (\", this.props.store.disp_map.disp_for_del.filter(el => el.RecLat === \"\" || el.RecLng === \"\").filter(el => el.RecAddress !== \"\").length, \")\")), this.props.store.disp_map.courier_filter !== '' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      style: {\n        margin: \"0 5px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, this.props.store.disp_map.courier_filter, \" \"), React.createElement(\"button\", {\n      onClick: this.set_courier_filter.bind(this, ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"x\")) : null, React.createElement(\"div\", {\n      className: \"disp_map_panel_input_element left_menu_filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"myDropdown\",\n      className: \"dropdown-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      value: this.props.store.disp_map.input_customer,\n      onChange: e => {\n        this.props.set_input_customer(e.target.value);\n      },\n      id: \"disp_map_customer_input\",\n      onFocus: () => this.props.set_focus_input_customer(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        this.set_input_customer(\"\");\n        this.props.set_focus_input_customer(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \"x\"), Customers.map((el, index) => {\n      if (this.props.store.disp_map.focus_input_customer) {\n        const filter = el.toUpperCase();\n        const text = this.props.store.disp_map.input_customer.toUpperCase();\n\n        if (filter.indexOf(text) > -1) {\n          return React.createElement(\"p\", {\n            onClick: () => {\n              this.set_input_customer(el);\n              this.props.set_focus_input_customer(false);\n            },\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 440\n            },\n            __self: this\n          }, el);\n        }\n      }\n    }))), React.createElement(\"div\", {\n      className: \"disp_map_panel_input_element left_menu_filter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"myDropdown\",\n      className: \"dropdown-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      value: this.props.store.disp_map.num_filter,\n      onChange: e => {\n        this.props.set_num_filter(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        this.props.set_num_filter(\"\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, \"x\"))), React.createElement(List, {\n      divided: true,\n      relaxed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, this.props.store.disp_map.courier_list.map((courier, index) => {\n      const courier_disp = this.props.store.disp_map.disp_for_del.filter(el => el.TaskValue === courier.text).filter(el => el.Customer === this.props.store.disp_map.input_customer || this.props.store.disp_map.input_customer === \"\").filter(el => {\n        const filter_num = el.Num.toUpperCase();\n        const filter_adress = el.RecAddress.toUpperCase();\n        const text = this.props.store.disp_map.num_filter.toUpperCase();\n        return text === \"\" || filter_num.indexOf(text) > -1 || filter_adress.indexOf(text) > -1;\n      });\n      const courier_disp_work = courier_disp.filter(el => el.StatusType === 'У сотрудника').length;\n      const courier_disp_not_work = courier_disp.filter(el => el.StatusType !== 'У сотрудника').length;\n      const q = courier_disp.length;\n\n      if (q > 0) {\n        return React.createElement(List.Item, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          onClick: this.set_courier_filter.bind(this, courier.text),\n          \"aria-hidden\": \"true\",\n          className: \"circle icon\",\n          style: {\n            color: courier.color\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 481\n          },\n          __self: this\n        }), React.createElement(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 482\n          },\n          __self: this\n        }, courier.text === '' ? React.createElement(List.Description, {\n          as: \"a\",\n          onClick: () => this.props.check_courier_disp_map(courier.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483\n          },\n          __self: this\n        }, \"Не распределено\", \" \", React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 484\n          },\n          __self: this\n        }, \"(\", q, \")\")) : React.createElement(List.Description, {\n          as: \"a\",\n          onClick: () => this.props.check_courier_disp_map(courier.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485\n          },\n          __self: this\n        }, courier.text, courier_disp_work !== 0 ? React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487\n          },\n          __self: this\n        }, \"(\", courier_disp_work, \")\") : null, courier_disp_not_work !== 0 ? React.createElement(\"b\", {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488\n          },\n          __self: this\n        }, \"(\", courier_disp_not_work, \")\") : null), courier.checked ? React.createElement(List.List, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 492\n          },\n          __self: this\n        }, courier_disp.map((disp, index) => {\n          let color_row;\n\n          if (disp.selected) {\n            color_row = \"#DDD\";\n          } else {\n            color_row = \"#FFF\";\n          }\n\n          return React.createElement(List.Item, {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 500\n            },\n            __self: this\n          }, React.createElement(List.Content, {\n            style: {\n              backgroundColor: color_row\n            },\n            onClick: this.marker_onClick.bind(this, disp.Num),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 502\n            },\n            __self: this\n          }, React.createElement(List.Header, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 503\n            },\n            __self: this\n          }, disp.Num, React.createElement(Icon, {\n            name: \"expand\",\n            onClick: this.open_disp.bind(this, disp.Num),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 504\n            },\n            __self: this\n          }), disp.StatusType === 'У сотрудника' ? React.createElement(Icon, {\n            name: \"truck\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 505\n            },\n            __self: this\n          }) : React.createElement(Icon, {\n            color: \"red\",\n            name: \"pallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 505\n            },\n            __self: this\n          })), React.createElement(List.Description, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 507\n            },\n            __self: this\n          }, disp.RecCity), React.createElement(List.Description, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 508\n            },\n            __self: this\n          }, disp.RecAddress), React.createElement(List.Description, {\n            as: \"a\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 509\n            },\n            __self: this\n          }, \"Вес:\" + disp.Weight + \" (\" + Math.round(disp.Volume * 5) / 1000 + \")\"), (disp.RecLat === \"\" || disp.RecLng === \"\") && disp.RecAddress !== \"\" ? React.createElement(Icon, {\n            name: \"search\",\n            color: \"red\",\n            onClick: this.geocode.bind(this, disp.Num, disp.RecCity + disp.RecAddress),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 511\n            },\n            __self: this\n          }) : null));\n        })) : null));\n      }\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"disp_map_panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"disp_map_panel_element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: e => this.props.set_disp_map_date(e.target.value),\n      value: this.props.store.disp_map.date,\n      type: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"rnk_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, \"\\u0420\\u041D\\u041A\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: e => this.set_disp_map_assignment_mode(e.target.checked),\n      checked: this.props.store.disp_map.assignment_mode,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"disp_map_panel_input_element\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"\\u041A\\u0443\\u0440\\u044C\\u0435\\u0440 \"), React.createElement(\"div\", {\n      id: \"myDropdown\",\n      className: \"dropdown-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      \"aria-hidden\": \"true\",\n      className: \"circle icon\",\n      style: {\n        color: this.props.store.disp_map.input_courier_color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.props.store.disp_map.input_courier,\n      onChange: e => {\n        this.props.set_input_courier(e.target.value);\n      },\n      id: \"disp_map_courier_input\",\n      onFocus: () => this.props.set_focus_input_courier(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        this.props.set_input_courier({\n          courier: '',\n          color: '#000'\n        });\n        this.props.set_focus_input_courier(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, \"x\"), this.props.store.disp_map.courier_list.map((el, index) => {\n      if (this.props.store.disp_map.focus_input_courier) {\n        const filter = el.text.toUpperCase();\n        const text = this.props.store.disp_map.input_courier.toUpperCase();\n\n        if (filter.indexOf(text) > -1) {\n          return React.createElement(\"p\", {\n            onClick: () => {\n              this.props.set_input_courier({\n                courier: el.text,\n                color: el.color\n              });\n              this.props.set_focus_input_courier(false);\n            },\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 558\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            \"aria-hidden\": \"true\",\n            className: \"circle icon\",\n            style: {\n              color: el.color\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 563\n            },\n            __self: this\n          }), el.text);\n        }\n      }\n    }))), React.createElement(\"div\", {\n      className: \"disp_map_button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button mini\",\n      onClick: this.get_map_data.bind(this, []),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\")), React.createElement(\"div\", {\n      className: \"disp_map_button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button mini\",\n      onClick: this.reset.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"\\u0421\\u0431\\u0440\\u043E\\u0441\")), React.createElement(\"div\", {\n      className: \"disp_map_button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button mini\",\n      onClick: this.set_courier.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, \"\\u041D\\u0430\\u0437\\u043D\\u0430\\u0447\\u0438\\u0442\\u044C\")), this.props.store.disp_map.assignment_mode ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E: \", this.props.store.disp_map.disp_for_del.filter(el => el.selected).length), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"\\u0412\\u0435\\u0441: \", this.props.store.disp_map.disp_for_del.filter(el => el.selected).reduce((acc, cur) => {\n      return acc + cur.Weight;\n    }, 0)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, \"\\u041E\\u0431\\u044A\\u0435\\u043C: \", this.props.store.disp_map.disp_for_del.filter(el => el.selected).reduce((acc, cur) => {\n      return acc + cur.Volume;\n    }, 0))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, this.props.store.disp_map.disp_for_del.filter(el => el.selected).map((el, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590\n        },\n        __self: this\n      });\n    }))), React.createElement(\"div\", {\n      className: \"disp_map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599\n      },\n      __self: this\n    }, React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyD5AmmHNIXXN0yquTsPxoXuvtOp8OYhe2E'\n      },\n      defaultCenter: this.props.store.home.map.center,\n      defaultZoom: 8,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => onGoogleApiLoaded(map, maps),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default connect(state => ({\n  store: state\n}), dispatch => ({\n  set_list_storage: param => {\n    dispatch({\n      type: 'set_list_storage',\n      payload: param\n    });\n  },\n  set_disp_map_date: param => {\n    dispatch({\n      type: 'set_disp_map_date',\n      payload: param\n    });\n  },\n  disp_map_reset_select: () => {\n    dispatch({\n      type: 'disp_map_reset_select'\n    });\n  },\n  set_disp_map_disp_for_del: param => {\n    dispatch({\n      type: 'set_disp_map_disp_for_del',\n      payload: param\n    });\n  },\n  select_disp_map_disp_for_del: param => {\n    dispatch({\n      type: 'select_disp_map_disp_for_del',\n      payload: param\n    });\n  },\n  set_disp_map_assignment_mode: param => {\n    dispatch({\n      type: 'set_disp_map_assignment_mode',\n      payload: param\n    });\n  },\n  select_disp_map_courier: param => {\n    dispatch({\n      type: 'select_disp_map_courier',\n      payload: param\n    });\n  },\n  disp_map_add_polygon_point: param => {\n    dispatch({\n      type: 'disp_map_add_polygon_point',\n      payload: param\n    });\n  },\n  select_arr_disp_for_del: param => {\n    dispatch({\n      type: 'select_arr_disp_for_del',\n      payload: param\n    });\n  },\n  modify_disp_map: param => {\n    dispatch({\n      type: 'modify_disp_map',\n      payload: param\n    });\n  },\n  set_full_screen: () => {\n    dispatch({\n      type: 'set_full_screen'\n    });\n  },\n  check_courier_disp_map: param => {\n    dispatch({\n      type: 'check_courier_disp_map',\n      payload: param\n    });\n  },\n  set_active_window: param => {\n    dispatch({\n      type: 'set_active_window',\n      payload: param\n    });\n  },\n  set_data_disp: param => {\n    dispatch({\n      type: 'set_data_disp',\n      payload: param\n    });\n  },\n  set_last_window: param => {\n    dispatch({\n      type: 'set_last_window',\n      payload: param\n    });\n  },\n  set_focus_input_courier: param => {\n    dispatch({\n      type: 'set_focus_input_courier',\n      payload: param\n    });\n  },\n  set_input_courier: param => {\n    dispatch({\n      type: 'set_input_courier',\n      payload: param\n    });\n  },\n  set_courier_filter: param => {\n    dispatch({\n      type: 'set_courier_filter',\n      payload: param\n    });\n  },\n  set_focus_input_customer: param => {\n    dispatch({\n      type: 'set_focus_input_customer',\n      payload: param\n    });\n  },\n  set_input_customer: param => {\n    dispatch({\n      type: 'set_input_customer',\n      payload: param\n    });\n  },\n  set_customer_filter: param => {\n    dispatch({\n      type: 'set_customer_filter',\n      payload: param\n    });\n  },\n  set_num_filter: param => {\n    dispatch({\n      type: 'set_num_filter',\n      payload: param\n    });\n  }\n}))(Screen);","map":{"version":3,"sources":["/home/saint/123/ek-lc-dev/src/screen/disp_map.js"],"names":["React","connect","GoogleMapReact","Select","customStyles","Card","Input","Button","Popup","Dropdown","List","Icon","logo","get_data","bermudaTriangle","g_map","g_maps","markers","shift","Screen","Component","set_input_customer","value","props","store","disp_map","input_customer","forEach","el_1","setMap","render_markers","disp_for_del","filter","el","Customer","set_courier_filter","arr","hard","console","log","disp_el","modify","map","marker_el","title","Num","courier_filter","TaskValue","lat","parseFloat","RecLat","replace","lng","RecLng","marker_onClick","path","scale","Weight","Volume","SymbolPath","CIRCLE","marker","Marker","position","selected","icon","fillColor","Color","fillOpacity","strokeColor","strokeWeight","infowindow","InfoWindow","content","RecCity","RecAddress","RecPerson","RecPhone","RecTime","Math","round","StatusType","StatusValue","StoreZone","assignment_mode","open","setInterval","toggleMarker","getVisible","setVisible","push","addListener","modify_disp_map","num","reset","disp_map_reset_select","setPaths","polygon","key","select_disp_map_disp_for_del","set_courier","set_courier_data","userkey","login","courier","input_courier","dispatch","then","result","get_map_data","err","not_modify","search","indexOf","data","terminal","date","set_disp_map_disp_for_del","set_disp_map_assignment_mode","checked","geocode","Address","geocoder","Geocoder","results","status","geometry","location","lat_lng_data","geocode_all","array","open_disp","set_active_window","set_data_disp","set_last_window","render","map_clck","target","disp_map_add_polygon_point","latLng","LatLng","inside","poly","containsLocation","select_arr_disp_for_del","onGoogleApiLoaded","maps","Polygon","strokeOpacity","event","addListenerOnce","e","document","onkeydown","keyCode","onkeyup","calc_height","general","full_screen","Customers","item","index","set_full_screen","bind","length","margin","set_focus_input_customer","focus_input_customer","toUpperCase","text","num_filter","set_num_filter","courier_list","courier_disp","filter_num","filter_adress","courier_disp_work","courier_disp_not_work","q","color","check_courier_disp_map","disp","color_row","backgroundColor","set_disp_map_date","input_courier_color","set_input_courier","set_focus_input_courier","focus_input_courier","reduce","acc","cur","home","center","state","set_list_storage","param","type","payload","select_disp_map_courier","set_customer_filter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport GoogleMapReact from 'google-map-react';\nimport Select from 'react-select'\nimport { customStyles } from \"./../common/common_style\";\nimport { Card, Input, Button,Popup, Dropdown, List, Icon } from 'semantic-ui-react'\nimport logo from './../common/1024.png'\nimport './disp_map.css';\nimport { get_data } from './../common/common_modules'\n\n\nlet bermudaTriangle\nlet g_map\nlet g_maps\nlet markers = []\nlet shift = false\n\n\nclass Screen extends React.Component {\n\n    set_input_customer = async (value) =>{\n\n        if(value !== this.props.store.disp_map.input_customer){\n       \n        await this.props.set_input_customer(value)\n\n        await markers.forEach((el_1)=>{\n            el_1.setMap(null)\n        })\n         if (value === \"\") {\n            this.render_markers(this.props.store.disp_map.disp_for_del,true)\n        } else {\n            this.render_markers(this.props.store.disp_map.disp_for_del.filter((el)=>{return el.Customer === value}),true)\n        }\n    }\n    }\n\n    set_courier_filter = async (value) => {\n        await  this.props.set_courier_filter(value)\n        this.render_markers(this.props.store.disp_map.disp_for_del,true) \n    }\n\n    render_markers = (arr,hard) => {\n        console.log(arr)\n        console.log(hard)\n        arr.filter((disp_el)=>{return disp_el.modify || hard}).map(el=>{\n            \n            markers.filter((marker_el)=>{return marker_el.title === el.Num}).forEach((el_1)=>{\n                el_1.setMap(null)\n            })\n            \n            if (this.props.store.disp_map.courier_filter === '' || this.props.store.disp_map.courier_filter === el.TaskValue){\n\n            \n\n            const lat = parseFloat(el.RecLat.replace(/,/, '.'))\n            const lng = parseFloat(el.RecLng.replace(/,/, '.'))\n            const Num = el.Num\n            const marker_onClick = this.marker_onClick\n            let path\n            let scale\n\n            if (el.Weight > 5 || el.Volume > 5){\n                path = 'M -3,2 -2,3 2,3 3,2 3,-2 2,-3 -2,-3 -3,-2 z'\n                scale = 3\n            } else {\n                path = g_maps.SymbolPath.CIRCLE\n                scale = 10\n            }\n\n            if (lat > 0 && lng > 0 ) {\n               \n                var marker = new g_maps.Marker({\n                    position: {lat:lat, lng:lng},\n                    map: g_map,\n                    title: Num,\n                    selected: el.selected,\n                    icon: {\n                        path: path,\n                        fillColor: el.Color,\n                        fillOpacity: 1,\n                        strokeColor: 'black',\n                        strokeWeight: .5,\n                        scale: scale,\n                      }\n                  });\n\n                  \n                  var infowindow = new g_maps.InfoWindow({\n                    content: `<div><div>${el.Num} </div><div>Заказчик: ${el.Customer}</div></div><div>Город: ${el.RecCity}</div><div>Адрес: <b>${el.RecAddress}</b></div><div>Получатель: ${el.RecPerson}</div><div>Телефон: ${el.RecPhone}</div><div>Время доставки: ${el.RecTime}</div><div>Вес: ${el.Weight} (${Math.round(el.Volume*5)/1000})</div><div>Статус: ${el.StatusType}: ${el.StatusValue} ${el.StoreZone===\"\"?(\"\"):(\"</div><div>Зона хранения:\"+el.StoreZone)}</div></div>`\n                    \n                  });\n\n                  if (el.selected){\n\n                    if(!this.props.store.disp_map.assignment_mode && !shift){\n                        infowindow.open(g_map, marker);\n                    }\n                    \n\n                    setInterval(function() { toggleMarker() }, 300);\n\n                    function toggleMarker() {\n                    if (marker.getVisible()) {\n                        marker.setVisible(false);\n                    } else {\n                        marker.setVisible(true);\n                    }\n                    }\n                }\n\n                markers.push(marker)\n                //console.log('push '+ Num)\n                \n                  marker.addListener('click', function() {\n                    marker_onClick(el.Num) \n                    \n                  });\n\n            }\n\n            this.props.modify_disp_map({num:Num,modify:false})\n        }\n        }\n        )\n    }\n\n    reset = async () => {\n\n        \n        await this.props.disp_map_reset_select()\n        \n        try {\n            await bermudaTriangle.setPaths(this.props.store.disp_map.polygon)\n            await bermudaTriangle.setMap(null);  \n        } catch{\n\n        } \n        await this.render_markers(this.props.store.disp_map.disp_for_del)\n    }\n\n\n    marker_onClick = async (key) => {\n       await this.props.select_disp_map_disp_for_del({num:key, shift:shift})\n        this.render_markers(this.props.store.disp_map.disp_for_del)\n    }\n\n    set_courier = () => {\n\n        const set_courier_data = {\n            userkey: this.props.store.login.userkey,\n            courier: this.props.store.disp_map.input_courier,\n            dispatch: this.props.store.disp_map.disp_for_del.filter(el=>el.selected).map(el=>{return(el.Num)}),  \n        }\n\n        //console.log(set_courier_data)\n        get_data('setcourier', set_courier_data).then(\n            (result) => {\n                //console.log(result);\n                this.get_map_data(this.props.store.disp_map.disp_for_del.filter(el=>!el.selected).map(el=>{return(el.Num)}) );\n                this.reset()\n            },\n            (err) => { console.log(err) }\n        );\n        \n    }\n\n    get_map_data = (not_modify) =>{\n        \n        console.log(not_modify)\n\n        markers.forEach((el_1)=>{\n            const search = not_modify.indexOf(el_1.title)\n            if (search === -1){\n            el_1.setMap(null)\n            }\n        })\n\n        const data = {\n            userkey: this.props.store.login.userkey,\n            terminal: \"000000001\",\n            date: this.props.store.disp_map.date,\n            not_modify: not_modify\n        }\n        console.log(data)\n        get_data('dispfordel', data).then(\n            (result) => {\n                console.log(result)\n                this.props.set_disp_map_disp_for_del(result)\n                this.render_markers(result)\n                \n            },\n            (err) => { \n                this.props.set_disp_map_disp_for_del([])\n                console.log(err)\n                 \n            }\n        );\n\n\n    }\n\n    set_disp_map_assignment_mode = (checked) =>{\n        \n        this.props.set_disp_map_assignment_mode(checked)\n        this.reset()\n    }\n\n    geocode = (Num,Address) =>{\n\n        console.log(Address)\n        let geocoder = new g_maps.Geocoder();\n        let position\n        const userkey = this.props.store.login.userkey\n        const get_map_data = this.get_map_data\n        const reset = this.reset\n        const not_modify = this.props.store.disp_map.disp_for_del.filter(el=>el.Num!==Num).map(el=>{return(el.Num)})\n        geocoder.geocode( { 'address': Address}, function(results, status) {\n            console.log(results)\n            console.log(status)\n            if (status == 'OK') {\n                position = results[0].geometry.location\n\n                const lat_lng_data = {\n                    userkey: userkey,\n                    dispatch: Num,\n                    lat: position.lat(),\n                    lng: position.lng()\n                }\n\n                get_data('setreclatlng', lat_lng_data).then(\n                    (result) => {\n                        console.log(result);\n                        get_map_data(not_modify);\n                        reset()\n                    },\n                    (err) => { console.log(err) }\n                );\n                \n            }\n        })\n    }\n\n    geocode_all = async () =>{\n\n        let geocoder = new g_maps.Geocoder();\n        const userkey = this.props.store.login.userkey\n        const array = this.props.store.disp_map.disp_for_del.filter(el=>el.RecLat===\"\" || el.RecLng===\"\")\n        const not_modify = this.props.store.disp_map.disp_for_del.filter(el=>el.RecLat!==\"\" && el.RecLng!==\"\").map(el=>{return(el.Num)})\n        for(const el of array){\n            \n            if(el.RecAddress !== \"\"){\n                await geocoder.geocode( { 'address': el.RecCity + el.RecAddress}, function(results, status) {\n                \n                if (status == 'OK') {\n                    const position = results[0].geometry.location\n    \n                    const lat_lng_data = {\n                        userkey: userkey,\n                        dispatch: el.Num,\n                        lat: position.lat(),\n                        lng: position.lng()\n                    }\n    \n                    get_data('setreclatlng', lat_lng_data).then(\n                        (result) => {\n                            console.log(result);\n                        },\n                        (err) => { console.log(err) }\n                    );\n                    \n                }\n            })\n        }\n        }\n\n        this.get_map_data (not_modify)\n        this.reset ()\n\n        \n    }\n    \n    open_disp = async (Num) => {\n        this.props.set_active_window(\"wait\");\n    \n        const data = {\n          userkey: this.props.store.login.userkey,\n          status: \"Накладная\",\n          num: Num\n        };\n    \n        get_data('dispatch', data).then(\n          (result) => {\n    \n            this.props.set_data_disp(result);\n            this.props.set_active_window(\"disp\");\n            this.props.set_last_window(\"disp_map\");\n    \n          },\n          (err) => { console.log(err) }\n        );\n    \n    \n      };\n\n    render() {\n        \n        \n\n        \n        //var polygon_point = this.props.store.disp_map.polygon\n\n        const map_clck = (target) => {\n            \n            if (this.props.store.disp_map.assignment_mode){\n                \n            this.props.disp_map_add_polygon_point(target) \n            \n            bermudaTriangle.setPaths(this.props.store.disp_map.polygon)\n            bermudaTriangle.setMap(g_map);\n\n            let arr = []\n\n            this.props.store.disp_map.disp_for_del.forEach(el => {\n                \n                const lat = parseFloat(el.RecLat.replace(/,/, '.'))\n                const lng = parseFloat(el.RecLng.replace(/,/, '.'))\n                if (lat > 0 && lng > 0 ) {\n               \n                var latLng = new g_maps.LatLng({lat: lat, lng: lng}); \n                var inside = g_maps.geometry.poly.containsLocation(latLng, bermudaTriangle)\n                //console.log(latLng.lat() + \" \" + latLng.lng())\n\n                //console.log(el.Num + inside)\n\n                if(inside) {\n                    arr.push(el.Num)\n                    }\n                }\n\n            });\n            \n            this.props.select_arr_disp_for_del(arr)\n            this.render_markers(this.props.store.disp_map.disp_for_del)\n        } else {\n            bermudaTriangle.setMap(null);\n\n        }\n\n        }\n\n        const render_markers = this.render_markers\n        const arr = this.props.store.disp_map.disp_for_del\n        const onGoogleApiLoaded = (map, maps) => {\n            g_map = map\n            g_maps = maps  \n\n            bermudaTriangle = new g_maps.Polygon({\n           \n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: '#FF0000',\n                fillOpacity: 0.35\n              });\n              g_maps.event.addListenerOnce(g_map, 'tilesloaded', ()=>{\n                render_markers(arr,true)\n              });\n\n                \n\n              g_maps.event.addListener(g_map, 'click', function(e) {\n               \n                map_clck(e.latLng)\n                \n            })\n\n            \n                \n\n            \n        }\n       \n        document.onkeydown = function (event) {\n            //console.log(event.keyCode)\n            try {\n              if (event.keyCode === 16) {\n                //set_hold_shift_true()\n                //console.log(\"Нажал\")\n                shift = true\n              }\n            } catch (e) { }\n          };\n      \n          document.onkeyup = function (event) {\n            try {\n              if (event.keyCode === 16) {\n                //set_hold_shift_false()\n                //console.log(\"Отпустил\")\n                shift = false\n              }\n            } catch (e) { }\n          };\n          \n        let calc_height = \"155px\"\n        if(this.props.store.general.full_screen){\n            calc_height = \"15px\"\n        }\n\n        let Customers = this.props.store.disp_map.disp_for_del.map((el)=>{ return el.Customer }).filter((item,index,array)=>{ return array.indexOf(item) === index })\n        \n        return (\n            <div className=\"disp_map_window\">\n                <div className=\"disp_map_left_menu overflow_y\">\n                <div className='disp_map_button'><button className='ui button mini' onClick={()=>{\n                    this.props.set_full_screen()\n                    this.render_markers.bind(this,this.props.store.disp_map.disp_for_del,true)\n                }}>Полноэкранный режим</button></div>\n                <div className='disp_map_button'><button className='ui button mini'  onClick={this.geocode_all.bind(this)}>Получить все координаты ({this.props.store.disp_map.disp_for_del.filter(el=>el.RecLat===\"\" || el.RecLng===\"\").filter(el=>el.RecAddress!==\"\").length})</button></div>\n            {this.props.store.disp_map.courier_filter !== ''?( <div>\n                <a style={{margin:\"0 5px\"}}>{this.props.store.disp_map.courier_filter} </a>\n                <button onClick={this.set_courier_filter.bind(this,'')}>x</button>\n            </div>):(null)}\n           \n            <div className='disp_map_panel_input_element left_menu_filter'>\n\n                    <div id=\"myDropdown\" className=\"dropdown-customer\">\n                        \n                        <input type=\"text\" autoComplete=\"off\" value={this.props.store.disp_map.input_customer} onChange={(e)=>{this.props.set_input_customer(e.target.value)}} id=\"disp_map_customer_input\" onFocus={()=>this.props.set_focus_input_customer(true)} />\n                        <button onClick={()=>{\n                            this.set_input_customer(\"\")\n                            this.props.set_focus_input_customer(false)\n                            }\n                            }>x</button>\n                        {Customers.map((el,index)=>{\n                            if (this.props.store.disp_map.focus_input_customer){\n                                const filter = el.toUpperCase();\n                                const text = this.props.store.disp_map.input_customer.toUpperCase()\n                                if (filter.indexOf(text) > -1) {\n                                    return (<p onClick={()=>{\n                                        \n                                         this.set_input_customer(el)\n                                         this.props.set_focus_input_customer(false)\n                                    }} key={index}>\n                                       \n                                        {el}\n                                        </p>)\n                                }\n                        }\n                        })}\n                        \n                    </div>\n                    </div> \n\n                    <div className='disp_map_panel_input_element left_menu_filter'>\n\n                    <div id=\"myDropdown\" className=\"dropdown-customer\">\n                        \n                        <input type=\"text\" autoComplete=\"off\" value={this.props.store.disp_map.num_filter} onChange={(e)=>{this.props.set_num_filter(e.target.value)}} />\n                        <button onClick={()=>{this.props.set_num_filter(\"\")}}>x</button>\n                        </div>\n                        </div>\n                        \n                <List divided relaxed>\n                  \n                  {this.props.store.disp_map.courier_list.map((courier,index)=>{\n                      const courier_disp = this.props.store.disp_map.disp_for_del.filter(el=>el.TaskValue === courier.text).filter(el=>el.Customer === this.props.store.disp_map.input_customer || this.props.store.disp_map.input_customer === \"\").filter(el=>{\n                        \n                        const filter_num = el.Num.toUpperCase()\n                        const filter_adress = el.RecAddress.toUpperCase()\n                        const text = this.props.store.disp_map.num_filter.toUpperCase()\n                        return text === \"\" || filter_num.indexOf(text) > -1 || filter_adress.indexOf(text) > -1\n                           \n                      })\n                      const courier_disp_work = courier_disp.filter(el=>el.StatusType === 'У сотрудника').length\n                      const courier_disp_not_work = courier_disp.filter(el=>el.StatusType !== 'У сотрудника').length\n                      const q = courier_disp.length\n                    if(q>0){\n                      return( <List.Item key={index}>\n                          {/* <List.Icon name='circle' verticalAlign='middle' /> */}\n                          <i onClick={this.set_courier_filter.bind(this,courier.text)} aria-hidden=\"true\" className=\"circle icon\" style={{color:courier.color}}></i>\n                          <List.Content>\n                              {courier.text===''?(<List.Description as='a' onClick={()=>this.props.check_courier_disp_map(courier.key)}>\n                          {\"Не распределено\"} <b>({q})</b>\n                          </List.Description>):(<List.Description as='a' onClick={()=>this.props.check_courier_disp_map(courier.key)}>\n                          {courier.text} \n                          {courier_disp_work !== 0 ? (<b>({courier_disp_work})</b>):(null)}\n                          {courier_disp_not_work !== 0 ? (<b style={{color:'red'}}>({courier_disp_not_work})</b>):(null)}\n                          </List.Description>)}\n                          \n                          {courier.checked?(\n                              <List.List>\n                                  {courier_disp.map((disp,index)=>{\n                                        let color_row\n                                        if(disp.selected){\n                                            color_row = \"#DDD\"\n                                        } else {\n                                            color_row = \"#FFF\"\n                                        }\n                                      return(<List.Item  key={index}>\n\n                                          <List.Content style={{backgroundColor:color_row}} onClick={this.marker_onClick.bind(this,disp.Num)}>\n                                          <List.Header as='a'>{disp.Num} \n                                          <Icon name='expand' onClick={this.open_disp.bind(this,disp.Num)}></Icon>\n                                          {disp.StatusType === 'У сотрудника'?(<Icon name='truck'></Icon>):(<Icon color='red' name='pallet'></Icon>)}\n                                          </List.Header>\n                                          <List.Description as='a'>{disp.RecCity}</List.Description>\n                                            <List.Description as='a'>{disp.RecAddress}</List.Description>\n                                            <List.Description as='a'>{\"Вес:\" + disp.Weight +\" (\"+ Math.round(disp.Volume*5)/1000+\")\"}</List.Description>\n                                            {(disp.RecLat === \"\" || disp.RecLng === \"\") && disp.RecAddress!==\"\" ?(\n                                                <Icon name='search' color='red' onClick={this.geocode.bind(this,disp.Num,disp.RecCity+disp.RecAddress)}></Icon>\n                                            ):(null)}\n                                            </List.Content>\n                                      </List.Item >)\n                                  }\n                                  )}\n                              </List.List>\n                          ):(null)}\n                          </List.Content>\n                          </List.Item>)\n                    }\n                    \n                  })}  \n                    </List>\n\n\n\n                </div>\n                <div>\n                <div className=\"disp_map_panel\">\n              \n              <div className='disp_map_panel_element'><input onChange={e => this.props.set_disp_map_date(e.target.value)} value={this.props.store.disp_map.date}  type=\"date\"></input></div> \n              <div id='rnk_div'><div>РНК</div><div><input onChange={e => this.set_disp_map_assignment_mode(e.target.checked)} checked={this.props.store.disp_map.assignment_mode}  type=\"checkbox\"></input></div></div> \n              <div className='disp_map_panel_input_element'><div>Курьер </div>\n                {/* <Dropdown\n                        placeholder='Выберете курьера'\n                        options={this.props.store.disp_map.courier_list}\n                        \n                        \n                        selection\n                        value={this.props.store.disp_map.selected_courier}\n                        onChange={(sel_value) => this.props.select_disp_map_courier(sel_value._targetInst.return.key)}\n                      />  */}\n\n                    <div id=\"myDropdown\" className=\"dropdown-content\">\n                        <i aria-hidden=\"true\" className=\"circle icon\" style={{color:this.props.store.disp_map.input_courier_color}}></i>\n                        <input type=\"text\" value={this.props.store.disp_map.input_courier} onChange={(e)=>{this.props.set_input_courier(e.target.value)}} id=\"disp_map_courier_input\" onFocus={()=>this.props.set_focus_input_courier(true)} />\n                        <button onClick={()=>{\n                            this.props.set_input_courier({courier:'',color:'#000'})\n                            this.props.set_focus_input_courier(false)\n                            }\n                            }>x</button>\n                        {this.props.store.disp_map.courier_list.map((el,index)=>{\n                            if (this.props.store.disp_map.focus_input_courier){\n                                const filter = el.text.toUpperCase();\n                                const text = this.props.store.disp_map.input_courier.toUpperCase()\n                                if (filter.indexOf(text) > -1) {\n                                    return (<p onClick={()=>{\n                                        \n                                        this.props.set_input_courier({courier:el.text, color:el.color})\n                                        this.props.set_focus_input_courier(false)\n                                    }} key={index}>\n                                        <i aria-hidden=\"true\" className=\"circle icon\" style={{color:el.color}}></i>\n                                        {el.text}\n                                        </p>)\n                                }\n                        }\n                        })}\n                        \n                    </div>\n\n                    \n                    \n                </div> \n             \n                <div className='disp_map_button'><button className='ui button mini' onClick={this.get_map_data.bind(this,[])}>Получить данные</button></div>\n                <div className='disp_map_button'><button className='ui button mini' onClick={this.reset.bind(this)}>Сброс</button></div>\n                <div className='disp_map_button'><button className='ui button mini' onClick={this.set_courier.bind(this)}>Назначить</button></div>\n             {this.props.store.disp_map.assignment_mode ? (\n                <div>\n                  <div>Количество: {this.props.store.disp_map.disp_for_del.filter(el=>el.selected).length}</div> \n                  <div>Вес: {this.props.store.disp_map.disp_for_del.filter(el=>el.selected).reduce((acc,cur)=>{return acc+cur.Weight},0)}</div> \n                  <div>Объем: {this.props.store.disp_map.disp_for_del.filter(el=>el.selected).reduce((acc,cur)=>{return acc+cur.Volume},0)}</div>  \n                </div>\n             ):(<div>\n              {this.props.store.disp_map.disp_for_del.filter(el=>el.selected).map((el,index) => {\n                  \n                  \n                  return(\n                      <div key={index}>\n                  \n                  </div>\n                  )\n              })\n                }\n                </div>)} \n              \n                </div>\n              <div className='disp_map'>\n              \n            \n              <GoogleMapReact\n                    bootstrapURLKeys={{ key: 'AIzaSyD5AmmHNIXXN0yquTsPxoXuvtOp8OYhe2E' }}\n                    defaultCenter={this.props.store.home.map.center}\n                    defaultZoom={8}\n                    yesIWantToUseGoogleMapApiInternals\n                    onGoogleApiLoaded={({ map, maps }) => onGoogleApiLoaded(map, maps)}\n                >\n\n           \n        \n                 {/* {this.props.store.disp_map.disp_for_del.map(el=>{\n                        let opacity = 0.9\n                        let blink = 0\n                        let borderColor = '#888'\n                       if (el.selected) {\n                        opacity = 1\n                        borderColor = '#000'\n                        blink = 0.2\n                       }\n                        const lat = parseFloat(el.RecLat.replace(/,/, '.'))\n                        const lng = parseFloat(el.RecLng.replace(/,/, '.'))\n\n                        if (lat > 0 && lng > 0 ) {\n                           \n                        return(\n                            <Marker \n                            key={el.Num}\n                            lat={lat}\n                            lng={lng}\n                            text={el.Num} \n                            size={5}\n                            el_key={el.Num}\n                            color={el.Color}\n                            opacity={opacity}\n                            borderColor={borderColor}\n                            onClick = {this.marker_onClick}\n                            blink = {blink}\n                            \n                            />\n                            )\n\n                        }\n                        }\n                    )\n                        } */}\n\n                </GoogleMapReact>\n                </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({\n        store: state\n    }),\n    dispatch => ({\n        set_list_storage: (param) => { dispatch({ type: 'set_list_storage', payload: param }) },\n        set_disp_map_date: (param) => { dispatch({ type: 'set_disp_map_date', payload: param }) },\n        disp_map_reset_select: () => { dispatch({ type: 'disp_map_reset_select' }) },\n        set_disp_map_disp_for_del: (param) => { dispatch({ type: 'set_disp_map_disp_for_del', payload: param }) },\n        select_disp_map_disp_for_del: (param) => { dispatch({ type: 'select_disp_map_disp_for_del', payload: param }) },\n        set_disp_map_assignment_mode: (param) => { dispatch({ type: 'set_disp_map_assignment_mode', payload: param }) },\n        select_disp_map_courier: (param) => { dispatch({ type: 'select_disp_map_courier', payload: param }) },\n        disp_map_add_polygon_point: (param) => { dispatch({ type: 'disp_map_add_polygon_point', payload: param }) },\n        select_arr_disp_for_del: (param) => { dispatch({ type: 'select_arr_disp_for_del', payload: param }) },\n        modify_disp_map: (param) => { dispatch({ type: 'modify_disp_map', payload: param }) },\n        set_full_screen: () => { dispatch({ type: 'set_full_screen'}) },\n        check_courier_disp_map: (param) => { dispatch({ type: 'check_courier_disp_map', payload: param }) },\n\n        set_active_window: (param) => { dispatch({ type: 'set_active_window', payload: param }) },\n        set_data_disp: (param) => { dispatch({ type: 'set_data_disp', payload: param }) },\n        set_last_window: (param) => { dispatch({ type: 'set_last_window', payload: param }) },\n        set_focus_input_courier: (param) => { dispatch({ type: 'set_focus_input_courier', payload: param }) },\n        set_input_courier: (param) => { dispatch({ type: 'set_input_courier', payload: param }) },\n        set_courier_filter: (param) => { dispatch({ type: 'set_courier_filter', payload: param }) },\n\n        set_focus_input_customer: (param) => { dispatch({ type: 'set_focus_input_customer', payload: param }) },\n        set_input_customer: (param) => { dispatch({ type: 'set_input_customer', payload: param }) },\n        set_customer_filter: (param) => { dispatch({ type: 'set_customer_filter', payload: param }) },\n\n        set_num_filter: (param) => { dispatch({ type: 'set_num_filter', payload: param }) },\n        \n    })\n)(Screen);"]},"metadata":{},"sourceType":"module"}