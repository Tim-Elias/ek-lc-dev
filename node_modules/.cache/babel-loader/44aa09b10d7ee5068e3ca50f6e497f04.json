{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Documents/ek-lc-dev/src/screen/test.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Sound from 'react-sound';\nimport test_sound from './../common/Sound_11084.wav'; //import voxImplant from 'voximplant-websdk'\n// import SpeechRecognition from \"react-speech-recognition\";\n// const recognition = new SpeechRecognition()\n// recognition.continous = true\n// recognition.interimResults = true\n// recognition.lang = 'en-US'\n// recognition.onresult = event => {\n//     console.log(event)\n//   }\n\nlet voximplant;\n\nclass Screen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sound_test = () => {\n      this.props.set_test_sound(Sound.status.PLAYING);\n    };\n\n    this.add_item = () => {\n      this.props.test_list_add_item(this.props.store.test.barcode);\n      this.props.set_test_barcode('');\n    };\n\n    this.call = () => {\n      const call = voximplant.call(\"102\");\n    };\n\n    this.voximplant = async () => {\n      // const fetchJsFromCDN = (src, externals = []) => {\n      //   new Promise((resolve, reject) => {\n      //     const script = document.createElement('script')\n      //     script.setAttribute('src', src)\n      //     script.addEventListener('load', () => {\n      //       resolve(externals.map(key => {\n      //         const ext = window[key]\n      //         typeof ext === 'undefined' && console.warn(`No external named '${key}' in window`)\n      //         return ext\n      //       }))\n      //     })\n      //     script.addEventListener('error', reject)\n      //     document.body.appendChild(script)\n      //   })\n      // }\n      // fetchJsFromCDN('//cdn.voximplant.com/edge/voximplant.min.js', ['VoxImplant']).then(([voximplant]) => voximplant.init())\n      //console.log(VoxImplant)\n      voximplant = window.VoxImplant.getInstance();\n\n      try {\n        await voximplant.init();\n        console.log('SDK initialized'); // voximplant.addEventListener(voximplant.Events.ConnectionClosed, () => {\n        //   console.log('Connection was closed')\n        // });\n\n        try {\n          await voximplant.connect();\n          console.log('Connection was established successfully');\n        } catch (e) {\n          console.log('Connection failed');\n        }\n      } catch (e) {\n        console.log('SDK init failure');\n      }\n\n      try {\n        // Change \"appname\" and \"accname\" to names of your application and account,\n        // \"username\" and \"password\" to name and password of user created via\n        // the control panel.\n        await voximplant.login(\"101@express-kinetika.timelias.voximplant.com\", \"Explorer48\");\n        console.log('Authorization success'); // Authorization success\n      } catch (e) {// Authorization failure\n      }\n    };\n  }\n\n  render() {\n    const add_item = this.add_item;\n\n    document.onkeydown = function (event) {\n      //console.log(event.keyCode)\n      try {\n        if (event.keyCode === 13) {\n          console.log();\n          add_item();\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.voximplant.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Voximplant\"), React.createElement(\"button\", {\n      onClick: this.call.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Call\"), React.createElement(\"input\", {\n      value: this.props.store.test.barcode,\n      onChange: e => {\n        this.props.set_test_barcode(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), this.props.store.test.list.map((el, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, el);\n    }), this.props.store.general.test_sound !== undefined ? React.createElement(Sound, {\n      url: test_sound,\n      playStatus: this.props.store.general.test_sound,\n      onLoading: console.log('1'),\n      onPlaying: console.log('2'),\n      onFinishedPlaying: console.log('3'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default connect(state => ({\n  store: state\n}), dispatch => ({\n  set_test_sound: param => {\n    dispatch({\n      type: 'set_test_sound',\n      payload: param\n    });\n  },\n  test_list_add_item: param => {\n    dispatch({\n      type: 'test_list_add_item',\n      payload: param\n    });\n  },\n  set_test_barcode: param => {\n    dispatch({\n      type: 'set_test_barcode',\n      payload: param\n    });\n  }\n}))(Screen);","map":{"version":3,"sources":["/Users/elias/Documents/ek-lc-dev/src/screen/test.js"],"names":["React","connect","Sound","test_sound","voximplant","Screen","Component","sound_test","props","set_test_sound","status","PLAYING","add_item","test_list_add_item","store","test","barcode","set_test_barcode","call","window","VoxImplant","getInstance","init","console","log","e","login","render","document","onkeydown","event","keyCode","bind","target","value","list","map","el","index","general","undefined","state","dispatch","param","type","payload"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { connect } from 'react-redux';\n\nimport Sound from 'react-sound';\nimport test_sound from './../common/Sound_11084.wav'\n\n//import voxImplant from 'voximplant-websdk'\n\n// import SpeechRecognition from \"react-speech-recognition\";\n\n// const recognition = new SpeechRecognition()\n\n// recognition.continous = true\n// recognition.interimResults = true\n// recognition.lang = 'en-US'\n// recognition.onresult = event => {\n//     console.log(event)\n//   }\n\n\nlet voximplant\n\nclass Screen extends React.Component {\n\n  \n    sound_test = () =>{\n        this.props.set_test_sound(Sound.status.PLAYING) \n    }\n\n    add_item = () => {\n        this.props.test_list_add_item(this.props.store.test.barcode)\n        this.props.set_test_barcode('')\n    }\n\n   \n    // start = () =>{\n    //     recognition.start()\n    // }\n\n    // end = () => {\n    //     recognition.end()\n\n    // }\n\n    call = () =>{\n      const call = voximplant.call(\"102\");\n    }\n\n\n     voximplant = async ()  => {\n\n      \n\n      // const fetchJsFromCDN = (src, externals = []) => {\n      //   new Promise((resolve, reject) => {\n      //     const script = document.createElement('script')\n      //     script.setAttribute('src', src)\n      //     script.addEventListener('load', () => {\n      //       resolve(externals.map(key => {\n      //         const ext = window[key]\n      //         typeof ext === 'undefined' && console.warn(`No external named '${key}' in window`)\n      //         return ext\n      //       }))\n      //     })\n      //     script.addEventListener('error', reject)\n      //     document.body.appendChild(script)\n      //   })\n      // }\n      \n      // fetchJsFromCDN('//cdn.voximplant.com/edge/voximplant.min.js', ['VoxImplant']).then(([voximplant]) => voximplant.init())\n\n      //console.log(VoxImplant)\n      voximplant = window.VoxImplant.getInstance();\n      try {\n        await voximplant.init();\n        console.log('SDK initialized')\n        // voximplant.addEventListener(voximplant.Events.ConnectionClosed, () => {\n        //   console.log('Connection was closed')\n        // });\n        try {\n          await voximplant.connect();\n          console.log('Connection was established successfully')\n        } catch (e) {\n          console.log('Connection failed')\n        }\n       } catch (e) {\n        console.log('SDK init failure')\n       }\n\n       try {\n        // Change \"appname\" and \"accname\" to names of your application and account,\n        // \"username\" and \"password\" to name and password of user created via\n        // the control panel.\n        await voximplant.login(\"101@express-kinetika.timelias.voximplant.com\",\n          \"Explorer48\");\n          console.log('Authorization success')\n        // Authorization success\n       } catch (e) {\n        // Authorization failure\n       }\n    }\n    \n\n    \n    \n    \n      render() {\n        \n        const add_item = this.add_item\n        document.onkeydown = function (event) {\n            //console.log(event.keyCode)\n            \n            try {\n              if (event.keyCode === 13) {\n                  console.log()\n                  add_item()\n                \n                \n              }\n            } catch (e) { \n                console.log(e)\n            }\n          };\n\n        return (\n          <div>\n            <button onClick={this.voximplant.bind(this)}>Voximplant</button>\n            <button onClick={this.call.bind(this)}>Call</button>\n           {/*  <button onClick={this.end.bind(this)}>end</button> */}\n            <input  value={this.props.store.test.barcode} onChange={(e)=>{this.props.set_test_barcode(e.target.value)}} />\n            {this.props.store.test.list.map((el,index)=>{\n                return(\n                    <div key={index}>{el}</div>\n                )\n            })}\n            {/* <button className=\"search_box\" onClick={this.sound_test.bind(this)}>Тест звука</button> */}\n           {this.props.store.general.test_sound !== undefined ? (\n                <Sound\n                url={test_sound}\n                playStatus={this.props.store.general.test_sound}\n                \n                onLoading={console.log('1')}\n                onPlaying={console.log('2')}\n                onFinishedPlaying={console.log('3')}\n              />\n           ):(null)}\n           \n          </div>\n        )\n      }\n}\n\nexport default connect(\n    state => ({\n        store: state\n    }),\n    dispatch => ({\n        set_test_sound: (param) => { dispatch({ type: 'set_test_sound', payload: param }) },\n        test_list_add_item: (param) => { dispatch({ type: 'test_list_add_item', payload: param }) },\n        set_test_barcode: (param) => { dispatch({ type: 'set_test_barcode', payload: param }) },\n    })\n)(Screen)\n\n"]},"metadata":{},"sourceType":"module"}