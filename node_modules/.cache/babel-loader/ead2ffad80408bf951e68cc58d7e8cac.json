{"ast":null,"code":"import { useContext, useEffect, useState, useRef } from 'react';\nimport CookiesContext from './CookiesContext';\nexport default function useCookies(dependencies) {\n  var cookies = useContext(CookiesContext);\n\n  if (!cookies) {\n    throw new Error('Missing <CookiesProvider>');\n  }\n\n  var initialCookies = cookies.getAll();\n\n  var _a = useState(initialCookies),\n      allCookies = _a[0],\n      setCookies = _a[1];\n\n  var previousCookiesRef = useRef(allCookies);\n  useEffect(function () {\n    function onChange() {\n      var newCookies = cookies.getAll();\n\n      if (shouldUpdate(dependencies || null, newCookies, previousCookiesRef.current)) {\n        setCookies(newCookies);\n      }\n\n      previousCookiesRef.current = newCookies;\n    }\n\n    cookies.addChangeListener(onChange);\n    return function () {\n      cookies.removeChangeListener(onChange);\n    };\n  }, [cookies]);\n  return [allCookies, cookies.set.bind(cookies), cookies.remove.bind(cookies)];\n}\n\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n  if (!dependencies) {\n    return true;\n  }\n\n  for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\n    var dependency = dependencies_1[_i];\n\n    if (newCookies[dependency] !== oldCookies[dependency]) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/elias/Documents/kinetika/node_modules/react-cookie/es6/useCookies.js"],"names":["useContext","useEffect","useState","useRef","CookiesContext","useCookies","dependencies","cookies","Error","initialCookies","getAll","_a","allCookies","setCookies","previousCookiesRef","onChange","newCookies","shouldUpdate","current","addChangeListener","removeChangeListener","set","bind","remove","oldCookies","_i","dependencies_1","length","dependency"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,eAAe,SAASC,UAAT,CAAoBC,YAApB,EAAkC;AAC7C,MAAIC,OAAO,GAAGP,UAAU,CAACI,cAAD,CAAxB;;AACA,MAAI,CAACG,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,MAAIC,cAAc,GAAGF,OAAO,CAACG,MAAR,EAArB;;AACA,MAAIC,EAAE,GAAGT,QAAQ,CAACO,cAAD,CAAjB;AAAA,MAAmCG,UAAU,GAAGD,EAAE,CAAC,CAAD,CAAlD;AAAA,MAAuDE,UAAU,GAAGF,EAAE,CAAC,CAAD,CAAtE;;AACA,MAAIG,kBAAkB,GAAGX,MAAM,CAACS,UAAD,CAA/B;AACAX,EAAAA,SAAS,CAAC,YAAY;AAClB,aAASc,QAAT,GAAoB;AAChB,UAAIC,UAAU,GAAGT,OAAO,CAACG,MAAR,EAAjB;;AACA,UAAIO,YAAY,CAACX,YAAY,IAAI,IAAjB,EAAuBU,UAAvB,EAAmCF,kBAAkB,CAACI,OAAtD,CAAhB,EAAgF;AAC5EL,QAAAA,UAAU,CAACG,UAAD,CAAV;AACH;;AACDF,MAAAA,kBAAkB,CAACI,OAAnB,GAA6BF,UAA7B;AACH;;AACDT,IAAAA,OAAO,CAACY,iBAAR,CAA0BJ,QAA1B;AACA,WAAO,YAAY;AACfR,MAAAA,OAAO,CAACa,oBAAR,CAA6BL,QAA7B;AACH,KAFD;AAGH,GAZQ,EAYN,CAACR,OAAD,CAZM,CAAT;AAaA,SAAO,CAACK,UAAD,EAAaL,OAAO,CAACc,GAAR,CAAYC,IAAZ,CAAiBf,OAAjB,CAAb,EAAwCA,OAAO,CAACgB,MAAR,CAAeD,IAAf,CAAoBf,OAApB,CAAxC,CAAP;AACH;;AACD,SAASU,YAAT,CAAsBX,YAAtB,EAAoCU,UAApC,EAAgDQ,UAAhD,EAA4D;AACxD,MAAI,CAAClB,YAAL,EAAmB;AACf,WAAO,IAAP;AACH;;AACD,OAAK,IAAImB,EAAE,GAAG,CAAT,EAAYC,cAAc,GAAGpB,YAAlC,EAAgDmB,EAAE,GAAGC,cAAc,CAACC,MAApE,EAA4EF,EAAE,EAA9E,EAAkF;AAC9E,QAAIG,UAAU,GAAGF,cAAc,CAACD,EAAD,CAA/B;;AACA,QAAIT,UAAU,CAACY,UAAD,CAAV,KAA2BJ,UAAU,CAACI,UAAD,CAAzC,EAAuD;AACnD,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH","sourcesContent":["import { useContext, useEffect, useState, useRef } from 'react';\nimport CookiesContext from './CookiesContext';\nexport default function useCookies(dependencies) {\n    var cookies = useContext(CookiesContext);\n    if (!cookies) {\n        throw new Error('Missing <CookiesProvider>');\n    }\n    var initialCookies = cookies.getAll();\n    var _a = useState(initialCookies), allCookies = _a[0], setCookies = _a[1];\n    var previousCookiesRef = useRef(allCookies);\n    useEffect(function () {\n        function onChange() {\n            var newCookies = cookies.getAll();\n            if (shouldUpdate(dependencies || null, newCookies, previousCookiesRef.current)) {\n                setCookies(newCookies);\n            }\n            previousCookiesRef.current = newCookies;\n        }\n        cookies.addChangeListener(onChange);\n        return function () {\n            cookies.removeChangeListener(onChange);\n        };\n    }, [cookies]);\n    return [allCookies, cookies.set.bind(cookies), cookies.remove.bind(cookies)];\n}\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n    if (!dependencies) {\n        return true;\n    }\n    for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\n        var dependency = dependencies_1[_i];\n        if (newCookies[dependency] !== oldCookies[dependency]) {\n            return true;\n        }\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}