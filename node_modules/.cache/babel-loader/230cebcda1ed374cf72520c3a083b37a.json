{"ast":null,"code":"var _jsxFileName = \"/Users/elias/Documents/ek-lc-dev/src/screen/test.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Sound from 'react-sound';\nimport test_sound from './../common/Sound_11084.wav';\nimport VoxImplant from 'VoxImplant'; // import SpeechRecognition from \"react-speech-recognition\";\n// const recognition = new SpeechRecognition()\n// recognition.continous = true\n// recognition.interimResults = true\n// recognition.lang = 'en-US'\n// recognition.onresult = event => {\n//     console.log(event)\n//   }\n\nconst voximplant = VoxImplant.getInstance();\n\nclass Screen extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sound_test = () => {\n      this.props.set_test_sound(Sound.status.PLAYING);\n    };\n\n    this.add_item = () => {\n      this.props.test_list_add_item(this.props.store.test.barcode);\n      this.props.set_test_barcode('');\n    };\n\n    this.voximplant = async () => {\n      try {\n        await voximplant.init(); // SDK initialized\n\n        voximplant.addEventListener(VoxImplant.Events.ConnectionClosed, () => {// Connection was closed\n        });\n\n        try {\n          await voximplant.connect(); // Connection was established successfully\n        } catch (e) {// Connection failed\n        }\n      } catch (e) {// SDK init failure\n      }\n    };\n  }\n\n  render() {\n    const add_item = this.add_item;\n\n    document.onkeydown = function (event) {\n      //console.log(event.keyCode)\n      try {\n        if (event.keyCode === 13) {\n          console.log();\n          add_item();\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.props.store.test.barcode,\n      onChange: e => {\n        this.props.set_test_barcode(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), this.props.store.test.list.map((el, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, el);\n    }), this.props.store.general.test_sound !== undefined ? React.createElement(Sound, {\n      url: test_sound,\n      playStatus: this.props.store.general.test_sound,\n      onLoading: console.log('1'),\n      onPlaying: console.log('2'),\n      onFinishedPlaying: console.log('3'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default connect(state => ({\n  store: state\n}), dispatch => ({\n  set_test_sound: param => {\n    dispatch({\n      type: 'set_test_sound',\n      payload: param\n    });\n  },\n  test_list_add_item: param => {\n    dispatch({\n      type: 'test_list_add_item',\n      payload: param\n    });\n  },\n  set_test_barcode: param => {\n    dispatch({\n      type: 'set_test_barcode',\n      payload: param\n    });\n  }\n}))(Screen);","map":{"version":3,"sources":["/Users/elias/Documents/ek-lc-dev/src/screen/test.js"],"names":["React","connect","Sound","test_sound","VoxImplant","voximplant","getInstance","Screen","Component","sound_test","props","set_test_sound","status","PLAYING","add_item","test_list_add_item","store","test","barcode","set_test_barcode","init","addEventListener","Events","ConnectionClosed","e","render","document","onkeydown","event","keyCode","console","log","target","value","list","map","el","index","general","undefined","state","dispatch","param","type","payload"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { connect } from 'react-redux';\n\nimport Sound from 'react-sound';\nimport test_sound from './../common/Sound_11084.wav'\nimport VoxImplant from 'VoxImplant'\n\n// import SpeechRecognition from \"react-speech-recognition\";\n\n// const recognition = new SpeechRecognition()\n\n// recognition.continous = true\n// recognition.interimResults = true\n// recognition.lang = 'en-US'\n// recognition.onresult = event => {\n//     console.log(event)\n//   }\n\nconst voximplant = VoxImplant.getInstance();\n\nclass Screen extends React.Component {\n\n  \n    sound_test = () =>{\n        this.props.set_test_sound(Sound.status.PLAYING) \n    }\n\n    add_item = () => {\n        this.props.test_list_add_item(this.props.store.test.barcode)\n        this.props.set_test_barcode('')\n    }\n\n   \n    // start = () =>{\n    //     recognition.start()\n    // }\n\n    // end = () => {\n    //     recognition.end()\n\n    // }\n     voximplant = async ()  => {\n      try {\n        await voximplant.init();\n        // SDK initialized\n        voximplant.addEventListener(VoxImplant.Events.ConnectionClosed, () => {\n          // Connection was closed\n        });\n        try {\n          await voximplant.connect();\n          // Connection was established successfully\n        } catch (e) {\n          // Connection failed\n        }\n       } catch (e) {\n        // SDK init failure\n       }\n    }\n    \n\n        \n    \n    \n      render() {\n\n        \n\n        const add_item = this.add_item\n        document.onkeydown = function (event) {\n            //console.log(event.keyCode)\n            \n            try {\n              if (event.keyCode === 13) {\n                  console.log()\n                  add_item()\n                \n                \n              }\n            } catch (e) { \n                console.log(e)\n            }\n          };\n\n        return (\n          <div>\n            {/* <button onClick={this.start.bind(this)}>start</button>\n            <button onClick={this.end.bind(this)}>end</button> */}\n            <input  value={this.props.store.test.barcode} onChange={(e)=>{this.props.set_test_barcode(e.target.value)}} />\n            {this.props.store.test.list.map((el,index)=>{\n                return(\n                    <div key={index}>{el}</div>\n                )\n            })}\n            {/* <button className=\"search_box\" onClick={this.sound_test.bind(this)}>Тест звука</button> */}\n           {this.props.store.general.test_sound !== undefined ? (\n                <Sound\n                url={test_sound}\n                playStatus={this.props.store.general.test_sound}\n                \n                onLoading={console.log('1')}\n                onPlaying={console.log('2')}\n                onFinishedPlaying={console.log('3')}\n              />\n           ):(null)}\n           \n          </div>\n        )\n      }\n}\n\nexport default connect(\n    state => ({\n        store: state\n    }),\n    dispatch => ({\n        set_test_sound: (param) => { dispatch({ type: 'set_test_sound', payload: param }) },\n        test_list_add_item: (param) => { dispatch({ type: 'test_list_add_item', payload: param }) },\n        set_test_barcode: (param) => { dispatch({ type: 'set_test_barcode', payload: param }) },\n    })\n)(Screen)\n\n"]},"metadata":{},"sourceType":"module"}