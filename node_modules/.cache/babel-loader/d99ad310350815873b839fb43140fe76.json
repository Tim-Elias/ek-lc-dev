{"ast":null,"code":"const today = new Date();\nlet mm = today.getMonth() + 1; // getMonth() is zero-based\n\nlet dd = today.getDate();\nconst y = today.getFullYear();\n\nif (mm < 10) {\n  mm = '0' + mm;\n}\n\nif (dd < 10) {\n  dd = '0' + dd;\n}\n\nconst date = y + '-' + mm + '-' + dd;\nconst initialState = {\n  data: [],\n  date_from: date,\n  date_to: date,\n  num_filter: \"\",\n  sender_address: \"\",\n  rec_address: \"\",\n  active_row: -1,\n  date_sort_type: false,\n  focus_input_send_city: false,\n  focus_input_rec_city: false,\n  focus_input_del_method: false,\n  focus_input_status: false,\n  filter_common_string: \"\",\n  send_city_filter: [],\n  rec_city_filter: [],\n  del_method_filter: [],\n  status_filter: [] //send_city_filter: [{id:0,check:true,name:\"Новосибирск\"},{id:1,check:false,name:\"Томск\"},{id:2,check:true,name:\"Бийск\"}]\n\n};\nexport default function dispatch(state = initialState, action) {\n  switch (action.type) {\n    case 'set_my_disp_data':\n      let send_city_filter_data = [];\n      let rec_city_filter_data = [];\n      let del_method_filter_data = [];\n      let status_filter_data = [];\n      send_city_filter_data = action.payload.map(el => {\n        return el.SendCity;\n      }).filter((el, index, arr) => arr.indexOf(el) === index).sort().map((el, index) => {\n        return {\n          id: index,\n          name: el,\n          check: true\n        };\n      });\n      rec_city_filter_data = action.payload.map(el => {\n        return el.RecCity;\n      }).filter((el, index, arr) => arr.indexOf(el) === index).sort().map((el, index) => {\n        return {\n          id: index,\n          name: el,\n          check: true\n        };\n      });\n      del_method_filter_data = action.payload.map(el => {\n        return el.DelMethod;\n      }).filter((el, index, arr) => arr.indexOf(el) === index).sort().map((el, index) => {\n        return {\n          id: index,\n          name: el,\n          check: true\n        };\n      });\n      status_filter_data = action.payload.map(el => {\n        return el.Status;\n      }).filter((el, index, arr) => arr.indexOf(el) === index).sort().map((el, index) => {\n        return {\n          id: index,\n          name: el,\n          check: true\n        };\n      });\n      return { ...state,\n        data: action.payload,\n        send_city_filter: send_city_filter_data,\n        rec_city_filter: rec_city_filter_data,\n        del_method_filter: del_method_filter_data,\n        status_filter: status_filter_data\n      };\n\n    case 'set_my_disp_active_row':\n      return { ...state,\n        active_row: action.payload\n      };\n\n    case 'set_my_disp_date_from':\n      return { ...state,\n        date_from: action.payload\n      };\n\n    case 'set_my_disp_date_to':\n      return { ...state,\n        date_to: action.payload\n      };\n    //case 'set_my_disp_date_sort': return{ ...state, date_sort_type: !state.date_sort_type }\n    //---Произвольный ввод\n\n    case 'set_my_disp_num_filter':\n      return { ...state,\n        num_filter: action.payload\n      };\n\n    case 'set_my_disp_sender_address':\n      return { ...state,\n        sender_address: action.payload\n      };\n\n    case 'set_my_disp_rec_address':\n      return { ...state,\n        rec_address: action.payload\n      };\n    //---Строгий выбор из списка\n\n    case 'set_my_disp_focus_all_default':\n      return { ...state,\n        num_filter: state.num_filter.map((el, index) => {\n          return {\n            id: index,\n            name: el,\n            check: true\n          };\n        }),\n        sender_address: state.sender_address.map((el, index) => {\n          return {\n            id: index,\n            name: el,\n            check: true\n          };\n        }),\n        rec_address: state.rec_address.map((el, index) => {\n          return {\n            id: index,\n            name: el,\n            check: true\n          };\n        }),\n        date_sort_type: false,\n        focus_input_send_city: false,\n        focus_input_rec_city: false,\n        focus_input_del_method: false,\n        focus_input_status: false\n      };\n\n    case 'set_my_disp_focus_input_send_city':\n      return { ...state,\n        focus_input_send_city: !state.focus_input_send_city,\n        focus_input_rec_city: false,\n        focus_input_del_method: false,\n        focus_input_status: false\n      };\n\n    case 'set_my_disp_send_city_filter_default':\n      return { ...state,\n        send_city_filter: state.send_city_filter.map(el => {\n          if (action.payload === \"select\") {\n            return { ...el,\n              check: true\n            };\n          } else return { ...el,\n            check: false\n          };\n        })\n      };\n\n    case 'set_my_disp_focus_input_rec_city':\n      return { ...state,\n        focus_input_rec_city: !state.focus_input_rec_city,\n        focus_input_send_city: false,\n        focus_input_del_method: false,\n        focus_input_status: false\n      };\n\n    case 'set_my_disp_rec_city_filter_default':\n      return { ...state,\n        rec_city_filter: state.rec_city_filter.map(el => {\n          if (action.payload === \"select\") {\n            return { ...el,\n              check: true\n            };\n          } else return { ...el,\n            check: false\n          };\n        })\n      };\n\n    case 'set_my_disp_focus_input_del_method':\n      return { ...state,\n        focus_input_del_method: !state.focus_input_del_method,\n        focus_input_send_city: false,\n        focus_input_rec_city: false,\n        focus_input_status: false\n      };\n\n    case 'set_my_disp_del_method_filter_default':\n      return { ...state,\n        del_method_filter: state.del_method_filter.map(el => {\n          if (action.payload === \"select\") {\n            return { ...el,\n              check: true\n            };\n          } else return { ...el,\n            check: false\n          };\n        })\n      };\n\n    case 'set_my_disp_focus_input_status':\n      return { ...state,\n        focus_input_status: !state.focus_input_status,\n        focus_input_send_city: false,\n        focus_input_rec_city: false,\n        focus_input_del_method: false\n      };\n\n    case 'set_my_disp_status_filter_default':\n      return { ...state,\n        status_filter: state.status_filter.map(el => {\n          if (action.payload === \"select\") {\n            return { ...el,\n              check: true\n            };\n          } else return { ...el,\n            check: false\n          };\n        })\n      };\n\n    case 'set_check_my_disp_send_city':\n      return { ...state,\n        send_city_filter: state.send_city_filter.map(el => {\n          if (el.id === action.payload) {\n            return { ...el,\n              check: !el.check\n            };\n          } else {\n            return el;\n          }\n        })\n      };\n\n    case 'set_check_my_disp_rec_city':\n      return { ...state,\n        rec_city_filter: state.rec_city_filter.map(el => {\n          if (el.id === action.payload) {\n            return { ...el,\n              check: !el.check\n            };\n          } else {\n            return el;\n          }\n        })\n      };\n\n    case 'set_check_my_disp_del_method':\n      return { ...state,\n        del_method_filter: state.del_method_filter.map(el => {\n          if (el.id === action.payload) {\n            return { ...el,\n              check: !el.check\n            };\n          } else {\n            return el;\n          }\n        })\n      };\n\n    case 'set_check_my_disp_status':\n      return { ...state,\n        status_filter: state.status_filter.map(el => {\n          if (el.id === action.payload) {\n            return { ...el,\n              check: !el.check\n            };\n          } else {\n            return el;\n          }\n        })\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/elias/Documents/ek-lc-dev/src/reducers/my_disp.js"],"names":["today","Date","mm","getMonth","dd","getDate","y","getFullYear","date","initialState","data","date_from","date_to","num_filter","sender_address","rec_address","active_row","date_sort_type","focus_input_send_city","focus_input_rec_city","focus_input_del_method","focus_input_status","filter_common_string","send_city_filter","rec_city_filter","del_method_filter","status_filter","dispatch","state","action","type","send_city_filter_data","rec_city_filter_data","del_method_filter_data","status_filter_data","payload","map","el","SendCity","filter","index","arr","indexOf","sort","id","name","check","RecCity","DelMethod","Status"],"mappings":"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","sourcesContent":["  const today = new Date()\r\n  let mm = today.getMonth() + 1; // getMonth() is zero-based\r\n  let dd = today.getDate();\r\n\r\n  const y = today.getFullYear()\r\n\r\n  if (mm<10) { mm = '0' + mm }\r\n  if (dd<10) {dd = '0' + dd}\r\n        \r\n  const date = y+'-'+mm+'-'+dd\r\n\r\n \r\nconst initialState = {\r\n    data: [],\r\n    date_from: date,\r\n    date_to: date,\r\n    num_filter: \"\",\r\n    sender_address: \"\",\r\n    rec_address: \"\",\r\n    active_row: -1,\r\n    date_sort_type: false,\r\n    focus_input_send_city: false,\r\n    focus_input_rec_city: false,\r\n    focus_input_del_method: false,\r\n    focus_input_status: false,\r\n    filter_common_string: \"\",\r\n    send_city_filter: [],\r\n    rec_city_filter: [],\r\n    del_method_filter: [],\r\n    status_filter: []\r\n    \r\n    //send_city_filter: [{id:0,check:true,name:\"Новосибирск\"},{id:1,check:false,name:\"Томск\"},{id:2,check:true,name:\"Бийск\"}]\r\n  }\r\n  \r\n  export default function dispatch (state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n      case 'set_my_disp_data':\r\n\r\n            let send_city_filter_data = []\r\n            let rec_city_filter_data = []\r\n            let del_method_filter_data = []\r\n            let status_filter_data = []\r\n\r\n            send_city_filter_data = action.payload.map(\r\n              (el) => {return el.SendCity}\r\n            ).filter(\r\n              (el, index, arr) => arr.indexOf(el) === index\r\n            ).sort(\r\n            ).map(\r\n              (el, index) => {return {id:index, name: el, check: true}})\r\n\r\n            rec_city_filter_data = action.payload.map(\r\n              (el) => {return el.RecCity}\r\n            ).filter(\r\n              (el, index, arr) => arr.indexOf(el) === index\r\n            ).sort(\r\n            ).map(\r\n              (el, index) => {return {id:index, name: el, check: true}})\r\n\r\n              del_method_filter_data = action.payload.map(\r\n              (el) => {return el.DelMethod}\r\n            ).filter(\r\n              (el, index, arr) => arr.indexOf(el) === index\r\n            ).sort(\r\n            ).map(\r\n              (el, index) => {return {id:index, name: el, check: true}})\r\n            \r\n              status_filter_data = action.payload.map(\r\n              (el) => {return el.Status}\r\n            ).filter(\r\n              (el, index, arr) => arr.indexOf(el) === index\r\n            ).sort(\r\n            ).map(\r\n              (el, index) => {return {id:index, name: el, check: true}})\r\n\r\n            return { ...state, data: action.payload, \r\n              send_city_filter: send_city_filter_data, \r\n              rec_city_filter: rec_city_filter_data,\r\n              del_method_filter: del_method_filter_data,\r\n              status_filter: status_filter_data}\r\n\r\n      case 'set_my_disp_active_row': return { ...state, active_row: action.payload }\r\n      case 'set_my_disp_date_from': return { ...state, date_from: action.payload }\r\n      case 'set_my_disp_date_to': return { ...state, date_to: action.payload }\r\n       \r\n      //case 'set_my_disp_date_sort': return{ ...state, date_sort_type: !state.date_sort_type }\r\n\r\n      //---Произвольный ввод\r\n      case 'set_my_disp_num_filter': return { ...state, num_filter: action.payload }\r\n      case 'set_my_disp_sender_address': return { ...state, sender_address: action.payload }\r\n      case 'set_my_disp_rec_address': return { ...state, rec_address: action.payload }\r\n\r\n      //---Строгий выбор из списка\r\n      case 'set_my_disp_focus_all_default' : return {...state,\r\n        num_filter: state.num_filter.map((el, index) => {return {id:index, name: el, check: true}}),\r\n        sender_address: state.sender_address.map((el, index) => {return {id:index, name: el, check: true}}),\r\n        rec_address: state.rec_address.map((el, index) => {return {id:index, name: el, check: true}}),\r\n        date_sort_type: false,\r\n        focus_input_send_city: false,\r\n        focus_input_rec_city: false,\r\n        focus_input_del_method: false,\r\n        focus_input_status: false\r\n      }\r\n      case 'set_my_disp_focus_input_send_city': return {...state, focus_input_send_city: !state.focus_input_send_city,\r\n        focus_input_rec_city: false,\r\n        focus_input_del_method: false,\r\n        focus_input_status: false}\r\n      case 'set_my_disp_send_city_filter_default' : return {...state, send_city_filter: state.send_city_filter.map((el) => {\r\n        if (action.payload === \"select\") {\r\n        return { ...el, check: true}}\r\n      else return { ...el, check: false}})}\r\n\r\n      case 'set_my_disp_focus_input_rec_city': return {...state, focus_input_rec_city: !state.focus_input_rec_city,\r\n        focus_input_send_city: false,\r\n        focus_input_del_method: false,\r\n        focus_input_status: false}\r\n      case 'set_my_disp_rec_city_filter_default' : return {...state, rec_city_filter: state.rec_city_filter.map((el) => {\r\n        if (action.payload === \"select\") {\r\n          return { ...el, check: true}}\r\n        else return { ...el, check: false}})}\r\n\r\n      case 'set_my_disp_focus_input_del_method': return {...state, focus_input_del_method: !state.focus_input_del_method,\r\n        focus_input_send_city: false,\r\n        focus_input_rec_city: false,\r\n        focus_input_status: false}\r\n      case 'set_my_disp_del_method_filter_default' : return {...state, del_method_filter: state.del_method_filter.map((el) => {\r\n        if (action.payload === \"select\") {\r\n          return { ...el, check: true}}\r\n        else return { ...el, check: false}})}\r\n\r\n      case 'set_my_disp_focus_input_status': return {...state, focus_input_status: !state.focus_input_status,\r\n        focus_input_send_city: false,\r\n        focus_input_rec_city: false,\r\n        focus_input_del_method: false}\r\n      case 'set_my_disp_status_filter_default' : return {...state, status_filter: state.status_filter.map((el) => {\r\n        if (action.payload === \"select\") {\r\n          return { ...el, check: true}}\r\n        else return { ...el, check: false}})}\r\n\r\n      case 'set_check_my_disp_send_city': return {\r\n        ...state, send_city_filter: state.send_city_filter.map((el) => {\r\n            if (el.id === action.payload) {\r\n              return { ...el, check: !el.check }\r\n            } else {\r\n              return el\r\n            }\r\n          })\r\n        \r\n      }\r\n\r\n      case 'set_check_my_disp_rec_city': return {\r\n        ...state, rec_city_filter: state.rec_city_filter.map((el) => {\r\n            if (el.id === action.payload) {\r\n              return { ...el, check: !el.check }\r\n            } else {\r\n              return el\r\n            }\r\n          })\r\n        \r\n      }\r\n\r\n      case 'set_check_my_disp_del_method': return {\r\n        ...state, del_method_filter: state.del_method_filter.map((el) => {\r\n            if (el.id === action.payload) {\r\n              return { ...el, check: !el.check }\r\n            } else {\r\n              return el\r\n            }\r\n          })\r\n        \r\n      }\r\n\r\n      case 'set_check_my_disp_status': return {\r\n        ...state, status_filter: state.status_filter.map((el) => {\r\n            if (el.id === action.payload) {\r\n              return { ...el, check: !el.check }\r\n            } else {\r\n              return el\r\n            }\r\n          })\r\n        \r\n      }\r\n\r\n      default: return state\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}